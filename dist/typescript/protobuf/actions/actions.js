/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.actions.AdditionAction');
goog.provide('proto.actions.AdministratorField');
goog.provide('proto.actions.AlterationAction');
goog.provide('proto.actions.AmendmentField');
goog.provide('proto.actions.AssetCreationAction');
goog.provide('proto.actions.AssetDefinitionAction');
goog.provide('proto.actions.AssetModificationAction');
goog.provide('proto.actions.AssetReceiverField');
goog.provide('proto.actions.AssetSettlementField');
goog.provide('proto.actions.AssetTransferField');
goog.provide('proto.actions.BallotCastAction');
goog.provide('proto.actions.BallotCountedAction');
goog.provide('proto.actions.ConfiscationAction');
goog.provide('proto.actions.ContractAddressChangeAction');
goog.provide('proto.actions.ContractAmendmentAction');
goog.provide('proto.actions.ContractFormationAction');
goog.provide('proto.actions.ContractOfferAction');
goog.provide('proto.actions.DocumentField');
goog.provide('proto.actions.EntityField');
goog.provide('proto.actions.EstablishmentAction');
goog.provide('proto.actions.FreezeAction');
goog.provide('proto.actions.ManagerField');
goog.provide('proto.actions.MessageAction');
goog.provide('proto.actions.OracleField');
goog.provide('proto.actions.OrderAction');
goog.provide('proto.actions.ProposalAction');
goog.provide('proto.actions.QuantityIndexField');
goog.provide('proto.actions.ReconciliationAction');
goog.provide('proto.actions.RejectionAction');
goog.provide('proto.actions.RemovalAction');
goog.provide('proto.actions.ResultAction');
goog.provide('proto.actions.SettlementAction');
goog.provide('proto.actions.StaticContractFormationAction');
goog.provide('proto.actions.TargetAddressField');
goog.provide('proto.actions.ThawAction');
goog.provide('proto.actions.TransferAction');
goog.provide('proto.actions.VoteAction');
goog.provide('proto.actions.VotingSystemField');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ContractOfferAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ContractOfferAction.repeatedFields_, null);
};
goog.inherits(proto.actions.ContractOfferAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ContractOfferAction.displayName = 'proto.actions.ContractOfferAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ContractOfferAction.repeatedFields_ = [5,15,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ContractOfferAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ContractOfferAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ContractOfferAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ContractOfferAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractname: msg.getContractname(),
    bodyofagreementtype: msg.getBodyofagreementtype(),
    bodyofagreement: msg.getBodyofagreement_asB64(),
    contracttype: msg.getContracttype(),
    supportingdocsList: jspb.Message.toObjectList(msg.getSupportingdocsList(),
    proto.actions.DocumentField.toObject, includeInstance),
    governinglaw: msg.getGoverninglaw(),
    jurisdiction: msg.getJurisdiction(),
    contractexpiration: msg.getContractexpiration(),
    contracturi: msg.getContracturi(),
    issuer: (f = msg.getIssuer()) && proto.actions.EntityField.toObject(includeInstance, f),
    issuerlogourl: msg.getIssuerlogourl(),
    contractoperatorincluded: msg.getContractoperatorincluded(),
    contractoperator: (f = msg.getContractoperator()) && proto.actions.EntityField.toObject(includeInstance, f),
    contractfee: msg.getContractfee(),
    votingsystemsList: jspb.Message.toObjectList(msg.getVotingsystemsList(),
    proto.actions.VotingSystemField.toObject, includeInstance),
    contractauthflags: msg.getContractauthflags_asB64(),
    restrictedqtyassets: msg.getRestrictedqtyassets(),
    administrationproposal: msg.getAdministrationproposal(),
    holderproposal: msg.getHolderproposal(),
    oraclesList: jspb.Message.toObjectList(msg.getOraclesList(),
    proto.actions.OracleField.toObject, includeInstance),
    masterpkh: msg.getMasterpkh_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ContractOfferAction}
 */
proto.actions.ContractOfferAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ContractOfferAction;
  return proto.actions.ContractOfferAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ContractOfferAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ContractOfferAction}
 */
proto.actions.ContractOfferAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBodyofagreementtype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyofagreement(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracttype(value);
      break;
    case 5:
      var value = new proto.actions.DocumentField;
      reader.readMessage(value,proto.actions.DocumentField.deserializeBinaryFromReader);
      msg.getSupportingdocsList().push(value);
      msg.setSupportingdocsList(msg.getSupportingdocsList());
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoverninglaw(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setJurisdiction(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractexpiration(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracturi(value);
      break;
    case 10:
      var value = new proto.actions.EntityField;
      reader.readMessage(value,proto.actions.EntityField.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuerlogourl(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContractoperatorincluded(value);
      break;
    case 13:
      var value = new proto.actions.EntityField;
      reader.readMessage(value,proto.actions.EntityField.deserializeBinaryFromReader);
      msg.setContractoperator(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractfee(value);
      break;
    case 15:
      var value = new proto.actions.VotingSystemField;
      reader.readMessage(value,proto.actions.VotingSystemField.deserializeBinaryFromReader);
      msg.getVotingsystemsList().push(value);
      msg.setVotingsystemsList(msg.getVotingsystemsList());
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractauthflags(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRestrictedqtyassets(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdministrationproposal(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHolderproposal(value);
      break;
    case 20:
      var value = new proto.actions.OracleField;
      reader.readMessage(value,proto.actions.OracleField.deserializeBinaryFromReader);
      msg.getOraclesList().push(value);
      msg.setOraclesList(msg.getOraclesList());
      break;
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMasterpkh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ContractOfferAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ContractOfferAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ContractOfferAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ContractOfferAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBodyofagreementtype();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getBodyofagreement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getContracttype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSupportingdocsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.actions.DocumentField.serializeBinaryToWriter
    );
  }
  f = this.getGoverninglaw();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getJurisdiction();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getContractexpiration();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = this.getContracturi();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getIssuer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.actions.EntityField.serializeBinaryToWriter
    );
  }
  f = this.getIssuerlogourl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getContractoperatorincluded();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = this.getContractoperator();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.actions.EntityField.serializeBinaryToWriter
    );
  }
  f = this.getContractfee();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = this.getVotingsystemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.actions.VotingSystemField.serializeBinaryToWriter
    );
  }
  f = this.getContractauthflags_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = this.getRestrictedqtyassets();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = this.getAdministrationproposal();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = this.getHolderproposal();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = this.getOraclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.actions.OracleField.serializeBinaryToWriter
    );
  }
  f = this.getMasterpkh_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      21,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ContractOfferAction} The clone.
 */
proto.actions.ContractOfferAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ContractOfferAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string ContractName = 1;
 * @return {string}
 */
proto.actions.ContractOfferAction.prototype.getContractname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.ContractOfferAction.prototype.setContractname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 BodyOfAgreementType = 2;
 * @return {number}
 */
proto.actions.ContractOfferAction.prototype.getBodyofagreementtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.ContractOfferAction.prototype.setBodyofagreementtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes BodyOfAgreement = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractOfferAction.prototype.getBodyofagreement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes BodyOfAgreement = 3;
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {string}
 */
proto.actions.ContractOfferAction.prototype.getBodyofagreement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyofagreement()));
};


/**
 * optional bytes BodyOfAgreement = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {!Uint8Array}
 */
proto.actions.ContractOfferAction.prototype.getBodyofagreement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyofagreement()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ContractOfferAction.prototype.setBodyofagreement = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string ContractType = 4;
 * @return {string}
 */
proto.actions.ContractOfferAction.prototype.getContracttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.actions.ContractOfferAction.prototype.setContracttype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated DocumentField SupportingDocs = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.DocumentField>}
 */
proto.actions.ContractOfferAction.prototype.getSupportingdocsList = function() {
  return /** @type{!Array.<!proto.actions.DocumentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.DocumentField, 5));
};


/** @param {Array.<!proto.actions.DocumentField>} value  */
proto.actions.ContractOfferAction.prototype.setSupportingdocsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.actions.ContractOfferAction.prototype.clearSupportingdocsList = function() {
  this.setSupportingdocsList([]);
};


/**
 * optional string GoverningLaw = 6;
 * @return {string}
 */
proto.actions.ContractOfferAction.prototype.getGoverninglaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.actions.ContractOfferAction.prototype.setGoverninglaw = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string Jurisdiction = 7;
 * @return {string}
 */
proto.actions.ContractOfferAction.prototype.getJurisdiction = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.actions.ContractOfferAction.prototype.setJurisdiction = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint64 ContractExpiration = 8;
 * @return {number}
 */
proto.actions.ContractOfferAction.prototype.getContractexpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.actions.ContractOfferAction.prototype.setContractexpiration = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string ContractURI = 9;
 * @return {string}
 */
proto.actions.ContractOfferAction.prototype.getContracturi = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.actions.ContractOfferAction.prototype.setContracturi = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional EntityField Issuer = 10;
 * @return {proto.actions.EntityField}
 */
proto.actions.ContractOfferAction.prototype.getIssuer = function() {
  return /** @type{proto.actions.EntityField} */ (
    jspb.Message.getWrapperField(this, proto.actions.EntityField, 10));
};


/** @param {proto.actions.EntityField|undefined} value  */
proto.actions.ContractOfferAction.prototype.setIssuer = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.actions.ContractOfferAction.prototype.clearIssuer = function() {
  this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.actions.ContractOfferAction.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string IssuerLogoURL = 11;
 * @return {string}
 */
proto.actions.ContractOfferAction.prototype.getIssuerlogourl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.actions.ContractOfferAction.prototype.setIssuerlogourl = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bool ContractOperatorIncluded = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ContractOfferAction.prototype.getContractoperatorincluded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 12, false));
};


/** @param {boolean} value  */
proto.actions.ContractOfferAction.prototype.setContractoperatorincluded = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional EntityField ContractOperator = 13;
 * @return {proto.actions.EntityField}
 */
proto.actions.ContractOfferAction.prototype.getContractoperator = function() {
  return /** @type{proto.actions.EntityField} */ (
    jspb.Message.getWrapperField(this, proto.actions.EntityField, 13));
};


/** @param {proto.actions.EntityField|undefined} value  */
proto.actions.ContractOfferAction.prototype.setContractoperator = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.actions.ContractOfferAction.prototype.clearContractoperator = function() {
  this.setContractoperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.actions.ContractOfferAction.prototype.hasContractoperator = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint64 ContractFee = 14;
 * @return {number}
 */
proto.actions.ContractOfferAction.prototype.getContractfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 14, 0));
};


/** @param {number} value  */
proto.actions.ContractOfferAction.prototype.setContractfee = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * repeated VotingSystemField VotingSystems = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.VotingSystemField>}
 */
proto.actions.ContractOfferAction.prototype.getVotingsystemsList = function() {
  return /** @type{!Array.<!proto.actions.VotingSystemField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.VotingSystemField, 15));
};


/** @param {Array.<!proto.actions.VotingSystemField>} value  */
proto.actions.ContractOfferAction.prototype.setVotingsystemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


proto.actions.ContractOfferAction.prototype.clearVotingsystemsList = function() {
  this.setVotingsystemsList([]);
};


/**
 * optional bytes ContractAuthFlags = 16;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractOfferAction.prototype.getContractauthflags = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 16, ""));
};


/**
 * optional bytes ContractAuthFlags = 16;
 * This is a type-conversion wrapper around `getContractauthflags()`
 * @return {string}
 */
proto.actions.ContractOfferAction.prototype.getContractauthflags_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractauthflags()));
};


/**
 * optional bytes ContractAuthFlags = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractauthflags()`
 * @return {!Uint8Array}
 */
proto.actions.ContractOfferAction.prototype.getContractauthflags_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractauthflags()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ContractOfferAction.prototype.setContractauthflags = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional uint64 RestrictedQtyAssets = 17;
 * @return {number}
 */
proto.actions.ContractOfferAction.prototype.getRestrictedqtyassets = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 17, 0));
};


/** @param {number} value  */
proto.actions.ContractOfferAction.prototype.setRestrictedqtyassets = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional bool AdministrationProposal = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ContractOfferAction.prototype.getAdministrationproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 18, false));
};


/** @param {boolean} value  */
proto.actions.ContractOfferAction.prototype.setAdministrationproposal = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional bool HolderProposal = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ContractOfferAction.prototype.getHolderproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 19, false));
};


/** @param {boolean} value  */
proto.actions.ContractOfferAction.prototype.setHolderproposal = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * repeated OracleField Oracles = 20;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.OracleField>}
 */
proto.actions.ContractOfferAction.prototype.getOraclesList = function() {
  return /** @type{!Array.<!proto.actions.OracleField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.OracleField, 20));
};


/** @param {Array.<!proto.actions.OracleField>} value  */
proto.actions.ContractOfferAction.prototype.setOraclesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


proto.actions.ContractOfferAction.prototype.clearOraclesList = function() {
  this.setOraclesList([]);
};


/**
 * optional bytes MasterPKH = 21;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractOfferAction.prototype.getMasterpkh = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 21, ""));
};


/**
 * optional bytes MasterPKH = 21;
 * This is a type-conversion wrapper around `getMasterpkh()`
 * @return {string}
 */
proto.actions.ContractOfferAction.prototype.getMasterpkh_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMasterpkh()));
};


/**
 * optional bytes MasterPKH = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMasterpkh()`
 * @return {!Uint8Array}
 */
proto.actions.ContractOfferAction.prototype.getMasterpkh_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMasterpkh()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ContractOfferAction.prototype.setMasterpkh = function(value) {
  jspb.Message.setField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ContractFormationAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ContractFormationAction.repeatedFields_, null);
};
goog.inherits(proto.actions.ContractFormationAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ContractFormationAction.displayName = 'proto.actions.ContractFormationAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ContractFormationAction.repeatedFields_ = [5,15,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ContractFormationAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ContractFormationAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ContractFormationAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ContractFormationAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractname: msg.getContractname(),
    bodyofagreementtype: msg.getBodyofagreementtype(),
    bodyofagreement: msg.getBodyofagreement_asB64(),
    contracttype: msg.getContracttype(),
    supportingdocsList: jspb.Message.toObjectList(msg.getSupportingdocsList(),
    proto.actions.DocumentField.toObject, includeInstance),
    governinglaw: msg.getGoverninglaw(),
    jurisdiction: msg.getJurisdiction(),
    contractexpiration: msg.getContractexpiration(),
    contracturi: msg.getContracturi(),
    issuer: (f = msg.getIssuer()) && proto.actions.EntityField.toObject(includeInstance, f),
    issuerlogourl: msg.getIssuerlogourl(),
    contractoperatorincluded: msg.getContractoperatorincluded(),
    contractoperator: (f = msg.getContractoperator()) && proto.actions.EntityField.toObject(includeInstance, f),
    contractfee: msg.getContractfee(),
    votingsystemsList: jspb.Message.toObjectList(msg.getVotingsystemsList(),
    proto.actions.VotingSystemField.toObject, includeInstance),
    contractauthflags: msg.getContractauthflags_asB64(),
    restrictedqtyassets: msg.getRestrictedqtyassets(),
    administrationproposal: msg.getAdministrationproposal(),
    holderproposal: msg.getHolderproposal(),
    oraclesList: jspb.Message.toObjectList(msg.getOraclesList(),
    proto.actions.OracleField.toObject, includeInstance),
    masterpkh: msg.getMasterpkh_asB64(),
    contractrevision: msg.getContractrevision(),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ContractFormationAction}
 */
proto.actions.ContractFormationAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ContractFormationAction;
  return proto.actions.ContractFormationAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ContractFormationAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ContractFormationAction}
 */
proto.actions.ContractFormationAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBodyofagreementtype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyofagreement(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracttype(value);
      break;
    case 5:
      var value = new proto.actions.DocumentField;
      reader.readMessage(value,proto.actions.DocumentField.deserializeBinaryFromReader);
      msg.getSupportingdocsList().push(value);
      msg.setSupportingdocsList(msg.getSupportingdocsList());
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoverninglaw(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setJurisdiction(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractexpiration(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracturi(value);
      break;
    case 10:
      var value = new proto.actions.EntityField;
      reader.readMessage(value,proto.actions.EntityField.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuerlogourl(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContractoperatorincluded(value);
      break;
    case 13:
      var value = new proto.actions.EntityField;
      reader.readMessage(value,proto.actions.EntityField.deserializeBinaryFromReader);
      msg.setContractoperator(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractfee(value);
      break;
    case 15:
      var value = new proto.actions.VotingSystemField;
      reader.readMessage(value,proto.actions.VotingSystemField.deserializeBinaryFromReader);
      msg.getVotingsystemsList().push(value);
      msg.setVotingsystemsList(msg.getVotingsystemsList());
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractauthflags(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRestrictedqtyassets(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdministrationproposal(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHolderproposal(value);
      break;
    case 20:
      var value = new proto.actions.OracleField;
      reader.readMessage(value,proto.actions.OracleField.deserializeBinaryFromReader);
      msg.getOraclesList().push(value);
      msg.setOraclesList(msg.getOraclesList());
      break;
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMasterpkh(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractrevision(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ContractFormationAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ContractFormationAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ContractFormationAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ContractFormationAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBodyofagreementtype();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getBodyofagreement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getContracttype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSupportingdocsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.actions.DocumentField.serializeBinaryToWriter
    );
  }
  f = this.getGoverninglaw();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getJurisdiction();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getContractexpiration();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = this.getContracturi();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getIssuer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.actions.EntityField.serializeBinaryToWriter
    );
  }
  f = this.getIssuerlogourl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getContractoperatorincluded();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = this.getContractoperator();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.actions.EntityField.serializeBinaryToWriter
    );
  }
  f = this.getContractfee();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = this.getVotingsystemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.actions.VotingSystemField.serializeBinaryToWriter
    );
  }
  f = this.getContractauthflags_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = this.getRestrictedqtyassets();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = this.getAdministrationproposal();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = this.getHolderproposal();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = this.getOraclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.actions.OracleField.serializeBinaryToWriter
    );
  }
  f = this.getMasterpkh_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      21,
      f
    );
  }
  f = this.getContractrevision();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      23,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ContractFormationAction} The clone.
 */
proto.actions.ContractFormationAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ContractFormationAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string ContractName = 1;
 * @return {string}
 */
proto.actions.ContractFormationAction.prototype.getContractname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.ContractFormationAction.prototype.setContractname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 BodyOfAgreementType = 2;
 * @return {number}
 */
proto.actions.ContractFormationAction.prototype.getBodyofagreementtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.ContractFormationAction.prototype.setBodyofagreementtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes BodyOfAgreement = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormationAction.prototype.getBodyofagreement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes BodyOfAgreement = 3;
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {string}
 */
proto.actions.ContractFormationAction.prototype.getBodyofagreement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyofagreement()));
};


/**
 * optional bytes BodyOfAgreement = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormationAction.prototype.getBodyofagreement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyofagreement()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ContractFormationAction.prototype.setBodyofagreement = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string ContractType = 4;
 * @return {string}
 */
proto.actions.ContractFormationAction.prototype.getContracttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.actions.ContractFormationAction.prototype.setContracttype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated DocumentField SupportingDocs = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.DocumentField>}
 */
proto.actions.ContractFormationAction.prototype.getSupportingdocsList = function() {
  return /** @type{!Array.<!proto.actions.DocumentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.DocumentField, 5));
};


/** @param {Array.<!proto.actions.DocumentField>} value  */
proto.actions.ContractFormationAction.prototype.setSupportingdocsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.actions.ContractFormationAction.prototype.clearSupportingdocsList = function() {
  this.setSupportingdocsList([]);
};


/**
 * optional string GoverningLaw = 6;
 * @return {string}
 */
proto.actions.ContractFormationAction.prototype.getGoverninglaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.actions.ContractFormationAction.prototype.setGoverninglaw = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string Jurisdiction = 7;
 * @return {string}
 */
proto.actions.ContractFormationAction.prototype.getJurisdiction = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.actions.ContractFormationAction.prototype.setJurisdiction = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint64 ContractExpiration = 8;
 * @return {number}
 */
proto.actions.ContractFormationAction.prototype.getContractexpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.actions.ContractFormationAction.prototype.setContractexpiration = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string ContractURI = 9;
 * @return {string}
 */
proto.actions.ContractFormationAction.prototype.getContracturi = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.actions.ContractFormationAction.prototype.setContracturi = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional EntityField Issuer = 10;
 * @return {proto.actions.EntityField}
 */
proto.actions.ContractFormationAction.prototype.getIssuer = function() {
  return /** @type{proto.actions.EntityField} */ (
    jspb.Message.getWrapperField(this, proto.actions.EntityField, 10));
};


/** @param {proto.actions.EntityField|undefined} value  */
proto.actions.ContractFormationAction.prototype.setIssuer = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.actions.ContractFormationAction.prototype.clearIssuer = function() {
  this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.actions.ContractFormationAction.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string IssuerLogoURL = 11;
 * @return {string}
 */
proto.actions.ContractFormationAction.prototype.getIssuerlogourl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.actions.ContractFormationAction.prototype.setIssuerlogourl = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bool ContractOperatorIncluded = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ContractFormationAction.prototype.getContractoperatorincluded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 12, false));
};


/** @param {boolean} value  */
proto.actions.ContractFormationAction.prototype.setContractoperatorincluded = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional EntityField ContractOperator = 13;
 * @return {proto.actions.EntityField}
 */
proto.actions.ContractFormationAction.prototype.getContractoperator = function() {
  return /** @type{proto.actions.EntityField} */ (
    jspb.Message.getWrapperField(this, proto.actions.EntityField, 13));
};


/** @param {proto.actions.EntityField|undefined} value  */
proto.actions.ContractFormationAction.prototype.setContractoperator = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.actions.ContractFormationAction.prototype.clearContractoperator = function() {
  this.setContractoperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.actions.ContractFormationAction.prototype.hasContractoperator = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint64 ContractFee = 14;
 * @return {number}
 */
proto.actions.ContractFormationAction.prototype.getContractfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 14, 0));
};


/** @param {number} value  */
proto.actions.ContractFormationAction.prototype.setContractfee = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * repeated VotingSystemField VotingSystems = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.VotingSystemField>}
 */
proto.actions.ContractFormationAction.prototype.getVotingsystemsList = function() {
  return /** @type{!Array.<!proto.actions.VotingSystemField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.VotingSystemField, 15));
};


/** @param {Array.<!proto.actions.VotingSystemField>} value  */
proto.actions.ContractFormationAction.prototype.setVotingsystemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


proto.actions.ContractFormationAction.prototype.clearVotingsystemsList = function() {
  this.setVotingsystemsList([]);
};


/**
 * optional bytes ContractAuthFlags = 16;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormationAction.prototype.getContractauthflags = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 16, ""));
};


/**
 * optional bytes ContractAuthFlags = 16;
 * This is a type-conversion wrapper around `getContractauthflags()`
 * @return {string}
 */
proto.actions.ContractFormationAction.prototype.getContractauthflags_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractauthflags()));
};


/**
 * optional bytes ContractAuthFlags = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractauthflags()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormationAction.prototype.getContractauthflags_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractauthflags()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ContractFormationAction.prototype.setContractauthflags = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional uint64 RestrictedQtyAssets = 17;
 * @return {number}
 */
proto.actions.ContractFormationAction.prototype.getRestrictedqtyassets = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 17, 0));
};


/** @param {number} value  */
proto.actions.ContractFormationAction.prototype.setRestrictedqtyassets = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional bool AdministrationProposal = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ContractFormationAction.prototype.getAdministrationproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 18, false));
};


/** @param {boolean} value  */
proto.actions.ContractFormationAction.prototype.setAdministrationproposal = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional bool HolderProposal = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ContractFormationAction.prototype.getHolderproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 19, false));
};


/** @param {boolean} value  */
proto.actions.ContractFormationAction.prototype.setHolderproposal = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * repeated OracleField Oracles = 20;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.OracleField>}
 */
proto.actions.ContractFormationAction.prototype.getOraclesList = function() {
  return /** @type{!Array.<!proto.actions.OracleField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.OracleField, 20));
};


/** @param {Array.<!proto.actions.OracleField>} value  */
proto.actions.ContractFormationAction.prototype.setOraclesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


proto.actions.ContractFormationAction.prototype.clearOraclesList = function() {
  this.setOraclesList([]);
};


/**
 * optional bytes MasterPKH = 21;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormationAction.prototype.getMasterpkh = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 21, ""));
};


/**
 * optional bytes MasterPKH = 21;
 * This is a type-conversion wrapper around `getMasterpkh()`
 * @return {string}
 */
proto.actions.ContractFormationAction.prototype.getMasterpkh_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMasterpkh()));
};


/**
 * optional bytes MasterPKH = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMasterpkh()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormationAction.prototype.getMasterpkh_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMasterpkh()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ContractFormationAction.prototype.setMasterpkh = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional uint32 ContractRevision = 22;
 * @return {number}
 */
proto.actions.ContractFormationAction.prototype.getContractrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 22, 0));
};


/** @param {number} value  */
proto.actions.ContractFormationAction.prototype.setContractrevision = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional uint64 Timestamp = 23;
 * @return {number}
 */
proto.actions.ContractFormationAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 23, 0));
};


/** @param {number} value  */
proto.actions.ContractFormationAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 23, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ContractAmendmentAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ContractAmendmentAction.repeatedFields_, null);
};
goog.inherits(proto.actions.ContractAmendmentAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ContractAmendmentAction.displayName = 'proto.actions.ContractAmendmentAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ContractAmendmentAction.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ContractAmendmentAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ContractAmendmentAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ContractAmendmentAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ContractAmendmentAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    changeadministrationaddress: msg.getChangeadministrationaddress(),
    changeoperatoraddress: msg.getChangeoperatoraddress(),
    contractrevision: msg.getContractrevision(),
    amendmentsList: jspb.Message.toObjectList(msg.getAmendmentsList(),
    proto.actions.AmendmentField.toObject, includeInstance),
    reftxid: msg.getReftxid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ContractAmendmentAction}
 */
proto.actions.ContractAmendmentAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ContractAmendmentAction;
  return proto.actions.ContractAmendmentAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ContractAmendmentAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ContractAmendmentAction}
 */
proto.actions.ContractAmendmentAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChangeadministrationaddress(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChangeoperatoraddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractrevision(value);
      break;
    case 4:
      var value = new proto.actions.AmendmentField;
      reader.readMessage(value,proto.actions.AmendmentField.deserializeBinaryFromReader);
      msg.getAmendmentsList().push(value);
      msg.setAmendmentsList(msg.getAmendmentsList());
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReftxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ContractAmendmentAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ContractAmendmentAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ContractAmendmentAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ContractAmendmentAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getChangeadministrationaddress();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getChangeoperatoraddress();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getContractrevision();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getAmendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.AmendmentField.serializeBinaryToWriter
    );
  }
  f = this.getReftxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ContractAmendmentAction} The clone.
 */
proto.actions.ContractAmendmentAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ContractAmendmentAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool ChangeAdministrationAddress = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ContractAmendmentAction.prototype.getChangeadministrationaddress = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.actions.ContractAmendmentAction.prototype.setChangeadministrationaddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool ChangeOperatorAddress = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ContractAmendmentAction.prototype.getChangeoperatoraddress = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.actions.ContractAmendmentAction.prototype.setChangeoperatoraddress = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 ContractRevision = 3;
 * @return {number}
 */
proto.actions.ContractAmendmentAction.prototype.getContractrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.actions.ContractAmendmentAction.prototype.setContractrevision = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated AmendmentField Amendments = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.AmendmentField>}
 */
proto.actions.ContractAmendmentAction.prototype.getAmendmentsList = function() {
  return /** @type{!Array.<!proto.actions.AmendmentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AmendmentField, 4));
};


/** @param {Array.<!proto.actions.AmendmentField>} value  */
proto.actions.ContractAmendmentAction.prototype.setAmendmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.actions.ContractAmendmentAction.prototype.clearAmendmentsList = function() {
  this.setAmendmentsList([]);
};


/**
 * optional bytes RefTxID = 5;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractAmendmentAction.prototype.getReftxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes RefTxID = 5;
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {string}
 */
proto.actions.ContractAmendmentAction.prototype.getReftxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReftxid()));
};


/**
 * optional bytes RefTxID = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {!Uint8Array}
 */
proto.actions.ContractAmendmentAction.prototype.getReftxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReftxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ContractAmendmentAction.prototype.setReftxid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.StaticContractFormationAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.StaticContractFormationAction.repeatedFields_, null);
};
goog.inherits(proto.actions.StaticContractFormationAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.StaticContractFormationAction.displayName = 'proto.actions.StaticContractFormationAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.StaticContractFormationAction.repeatedFields_ = [6,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.StaticContractFormationAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.StaticContractFormationAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.StaticContractFormationAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.StaticContractFormationAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractname: msg.getContractname(),
    contractcode: msg.getContractcode_asB64(),
    bodyofagreementtype: msg.getBodyofagreementtype(),
    bodyofagreement: msg.getBodyofagreement_asB64(),
    contracttype: msg.getContracttype(),
    supportingdocsList: jspb.Message.toObjectList(msg.getSupportingdocsList(),
    proto.actions.DocumentField.toObject, includeInstance),
    contractrevision: msg.getContractrevision(),
    governinglaw: msg.getGoverninglaw(),
    jurisdiction: msg.getJurisdiction(),
    effectivedate: msg.getEffectivedate(),
    contractexpiration: msg.getContractexpiration(),
    contracturi: msg.getContracturi(),
    prevrevtxid: msg.getPrevrevtxid_asB64(),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.actions.EntityField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.StaticContractFormationAction}
 */
proto.actions.StaticContractFormationAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.StaticContractFormationAction;
  return proto.actions.StaticContractFormationAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.StaticContractFormationAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.StaticContractFormationAction}
 */
proto.actions.StaticContractFormationAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractname(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractcode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBodyofagreementtype(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyofagreement(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracttype(value);
      break;
    case 6:
      var value = new proto.actions.DocumentField;
      reader.readMessage(value,proto.actions.DocumentField.deserializeBinaryFromReader);
      msg.getSupportingdocsList().push(value);
      msg.setSupportingdocsList(msg.getSupportingdocsList());
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractrevision(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoverninglaw(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setJurisdiction(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEffectivedate(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractexpiration(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracturi(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevrevtxid(value);
      break;
    case 14:
      var value = new proto.actions.EntityField;
      reader.readMessage(value,proto.actions.EntityField.deserializeBinaryFromReader);
      msg.getEntitiesList().push(value);
      msg.setEntitiesList(msg.getEntitiesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.StaticContractFormationAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.StaticContractFormationAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.StaticContractFormationAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.StaticContractFormationAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getContractcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getBodyofagreementtype();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getBodyofagreement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getContracttype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getSupportingdocsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.actions.DocumentField.serializeBinaryToWriter
    );
  }
  f = this.getContractrevision();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getGoverninglaw();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getJurisdiction();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getEffectivedate();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = this.getContractexpiration();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = this.getContracturi();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getPrevrevtxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = this.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.actions.EntityField.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.StaticContractFormationAction} The clone.
 */
proto.actions.StaticContractFormationAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.StaticContractFormationAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string ContractName = 1;
 * @return {string}
 */
proto.actions.StaticContractFormationAction.prototype.getContractname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.StaticContractFormationAction.prototype.setContractname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes ContractCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.StaticContractFormationAction.prototype.getContractcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes ContractCode = 2;
 * This is a type-conversion wrapper around `getContractcode()`
 * @return {string}
 */
proto.actions.StaticContractFormationAction.prototype.getContractcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractcode()));
};


/**
 * optional bytes ContractCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractcode()`
 * @return {!Uint8Array}
 */
proto.actions.StaticContractFormationAction.prototype.getContractcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.StaticContractFormationAction.prototype.setContractcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 BodyOfAgreementType = 3;
 * @return {number}
 */
proto.actions.StaticContractFormationAction.prototype.getBodyofagreementtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.actions.StaticContractFormationAction.prototype.setBodyofagreementtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes BodyOfAgreement = 4;
 * @return {!(string|Uint8Array)}
 */
proto.actions.StaticContractFormationAction.prototype.getBodyofagreement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes BodyOfAgreement = 4;
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {string}
 */
proto.actions.StaticContractFormationAction.prototype.getBodyofagreement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyofagreement()));
};


/**
 * optional bytes BodyOfAgreement = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {!Uint8Array}
 */
proto.actions.StaticContractFormationAction.prototype.getBodyofagreement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyofagreement()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.StaticContractFormationAction.prototype.setBodyofagreement = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string ContractType = 5;
 * @return {string}
 */
proto.actions.StaticContractFormationAction.prototype.getContracttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.actions.StaticContractFormationAction.prototype.setContracttype = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated DocumentField SupportingDocs = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.DocumentField>}
 */
proto.actions.StaticContractFormationAction.prototype.getSupportingdocsList = function() {
  return /** @type{!Array.<!proto.actions.DocumentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.DocumentField, 6));
};


/** @param {Array.<!proto.actions.DocumentField>} value  */
proto.actions.StaticContractFormationAction.prototype.setSupportingdocsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.actions.StaticContractFormationAction.prototype.clearSupportingdocsList = function() {
  this.setSupportingdocsList([]);
};


/**
 * optional uint32 ContractRevision = 7;
 * @return {number}
 */
proto.actions.StaticContractFormationAction.prototype.getContractrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.actions.StaticContractFormationAction.prototype.setContractrevision = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string GoverningLaw = 8;
 * @return {string}
 */
proto.actions.StaticContractFormationAction.prototype.getGoverninglaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.actions.StaticContractFormationAction.prototype.setGoverninglaw = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string Jurisdiction = 9;
 * @return {string}
 */
proto.actions.StaticContractFormationAction.prototype.getJurisdiction = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.actions.StaticContractFormationAction.prototype.setJurisdiction = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint64 EffectiveDate = 10;
 * @return {number}
 */
proto.actions.StaticContractFormationAction.prototype.getEffectivedate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.actions.StaticContractFormationAction.prototype.setEffectivedate = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint64 ContractExpiration = 11;
 * @return {number}
 */
proto.actions.StaticContractFormationAction.prototype.getContractexpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.actions.StaticContractFormationAction.prototype.setContractexpiration = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string ContractURI = 12;
 * @return {string}
 */
proto.actions.StaticContractFormationAction.prototype.getContracturi = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.actions.StaticContractFormationAction.prototype.setContracturi = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bytes PrevRevTxID = 13;
 * @return {!(string|Uint8Array)}
 */
proto.actions.StaticContractFormationAction.prototype.getPrevrevtxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/**
 * optional bytes PrevRevTxID = 13;
 * This is a type-conversion wrapper around `getPrevrevtxid()`
 * @return {string}
 */
proto.actions.StaticContractFormationAction.prototype.getPrevrevtxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevrevtxid()));
};


/**
 * optional bytes PrevRevTxID = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevrevtxid()`
 * @return {!Uint8Array}
 */
proto.actions.StaticContractFormationAction.prototype.getPrevrevtxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevrevtxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.StaticContractFormationAction.prototype.setPrevrevtxid = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * repeated EntityField Entities = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.EntityField>}
 */
proto.actions.StaticContractFormationAction.prototype.getEntitiesList = function() {
  return /** @type{!Array.<!proto.actions.EntityField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.EntityField, 14));
};


/** @param {Array.<!proto.actions.EntityField>} value  */
proto.actions.StaticContractFormationAction.prototype.setEntitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


proto.actions.StaticContractFormationAction.prototype.clearEntitiesList = function() {
  this.setEntitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ContractAddressChangeAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.ContractAddressChangeAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ContractAddressChangeAction.displayName = 'proto.actions.ContractAddressChangeAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ContractAddressChangeAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ContractAddressChangeAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ContractAddressChangeAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ContractAddressChangeAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    newcontractpkh: msg.getNewcontractpkh_asB64(),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ContractAddressChangeAction}
 */
proto.actions.ContractAddressChangeAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ContractAddressChangeAction;
  return proto.actions.ContractAddressChangeAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ContractAddressChangeAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ContractAddressChangeAction}
 */
proto.actions.ContractAddressChangeAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewcontractpkh(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ContractAddressChangeAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ContractAddressChangeAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ContractAddressChangeAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ContractAddressChangeAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNewcontractpkh_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ContractAddressChangeAction} The clone.
 */
proto.actions.ContractAddressChangeAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ContractAddressChangeAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes NewContractPKH = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractAddressChangeAction.prototype.getNewcontractpkh = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes NewContractPKH = 1;
 * This is a type-conversion wrapper around `getNewcontractpkh()`
 * @return {string}
 */
proto.actions.ContractAddressChangeAction.prototype.getNewcontractpkh_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewcontractpkh()));
};


/**
 * optional bytes NewContractPKH = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewcontractpkh()`
 * @return {!Uint8Array}
 */
proto.actions.ContractAddressChangeAction.prototype.getNewcontractpkh_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewcontractpkh()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ContractAddressChangeAction.prototype.setNewcontractpkh = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 Timestamp = 2;
 * @return {number}
 */
proto.actions.ContractAddressChangeAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.ContractAddressChangeAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetDefinitionAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetDefinitionAction.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetDefinitionAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AssetDefinitionAction.displayName = 'proto.actions.AssetDefinitionAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetDefinitionAction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetDefinitionAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetDefinitionAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetDefinitionAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AssetDefinitionAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetauthflags: msg.getAssetauthflags_asB64(),
    transferspermitted: msg.getTransferspermitted(),
    traderestrictionsList: jspb.Message.getField(msg, 3),
    enforcementorderspermitted: msg.getEnforcementorderspermitted(),
    votingrights: msg.getVotingrights(),
    votemultiplier: msg.getVotemultiplier(),
    administrationproposal: msg.getAdministrationproposal(),
    holderproposal: msg.getHolderproposal(),
    assetmodificationgovernance: msg.getAssetmodificationgovernance(),
    tokenqty: msg.getTokenqty(),
    assetpayload: msg.getAssetpayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetDefinitionAction}
 */
proto.actions.AssetDefinitionAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetDefinitionAction;
  return proto.actions.AssetDefinitionAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetDefinitionAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetDefinitionAction}
 */
proto.actions.AssetDefinitionAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetauthflags(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransferspermitted(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getTraderestrictionsList().push(value);
      msg.setTraderestrictionsList(msg.getTraderestrictionsList());
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnforcementorderspermitted(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVotingrights(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotemultiplier(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdministrationproposal(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHolderproposal(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssetmodificationgovernance(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTokenqty(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetpayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetDefinitionAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetDefinitionAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetDefinitionAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetDefinitionAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssetauthflags_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getTransferspermitted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getTraderestrictionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = this.getEnforcementorderspermitted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getVotingrights();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getVotemultiplier();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getAdministrationproposal();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getHolderproposal();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = this.getAssetmodificationgovernance();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getTokenqty();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = this.getAssetpayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AssetDefinitionAction} The clone.
 */
proto.actions.AssetDefinitionAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AssetDefinitionAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes AssetAuthFlags = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetDefinitionAction.prototype.getAssetauthflags = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes AssetAuthFlags = 1;
 * This is a type-conversion wrapper around `getAssetauthflags()`
 * @return {string}
 */
proto.actions.AssetDefinitionAction.prototype.getAssetauthflags_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetauthflags()));
};


/**
 * optional bytes AssetAuthFlags = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetauthflags()`
 * @return {!Uint8Array}
 */
proto.actions.AssetDefinitionAction.prototype.getAssetauthflags_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetauthflags()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetDefinitionAction.prototype.setAssetauthflags = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool TransfersPermitted = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetDefinitionAction.prototype.getTransferspermitted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.actions.AssetDefinitionAction.prototype.setTransferspermitted = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string TradeRestrictions = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.actions.AssetDefinitionAction.prototype.getTraderestrictionsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.actions.AssetDefinitionAction.prototype.setTraderestrictionsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.actions.AssetDefinitionAction.prototype.clearTraderestrictionsList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * optional bool EnforcementOrdersPermitted = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetDefinitionAction.prototype.getEnforcementorderspermitted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.actions.AssetDefinitionAction.prototype.setEnforcementorderspermitted = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool VotingRights = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetDefinitionAction.prototype.getVotingrights = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.actions.AssetDefinitionAction.prototype.setVotingrights = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 VoteMultiplier = 6;
 * @return {number}
 */
proto.actions.AssetDefinitionAction.prototype.getVotemultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.actions.AssetDefinitionAction.prototype.setVotemultiplier = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool AdministrationProposal = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetDefinitionAction.prototype.getAdministrationproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 7, false));
};


/** @param {boolean} value  */
proto.actions.AssetDefinitionAction.prototype.setAdministrationproposal = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool HolderProposal = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetDefinitionAction.prototype.getHolderproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 8, false));
};


/** @param {boolean} value  */
proto.actions.AssetDefinitionAction.prototype.setHolderproposal = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 AssetModificationGovernance = 9;
 * @return {number}
 */
proto.actions.AssetDefinitionAction.prototype.getAssetmodificationgovernance = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.actions.AssetDefinitionAction.prototype.setAssetmodificationgovernance = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint64 TokenQty = 10;
 * @return {number}
 */
proto.actions.AssetDefinitionAction.prototype.getTokenqty = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.actions.AssetDefinitionAction.prototype.setTokenqty = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bytes AssetPayload = 11;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetDefinitionAction.prototype.getAssetpayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/**
 * optional bytes AssetPayload = 11;
 * This is a type-conversion wrapper around `getAssetpayload()`
 * @return {string}
 */
proto.actions.AssetDefinitionAction.prototype.getAssetpayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetpayload()));
};


/**
 * optional bytes AssetPayload = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetpayload()`
 * @return {!Uint8Array}
 */
proto.actions.AssetDefinitionAction.prototype.getAssetpayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetpayload()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetDefinitionAction.prototype.setAssetpayload = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetCreationAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetCreationAction.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetCreationAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AssetCreationAction.displayName = 'proto.actions.AssetCreationAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetCreationAction.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetCreationAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetCreationAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetCreationAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AssetCreationAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetcode: msg.getAssetcode_asB64(),
    assetindex: msg.getAssetindex(),
    assetauthflags: msg.getAssetauthflags_asB64(),
    transferspermitted: msg.getTransferspermitted(),
    traderestrictionsList: jspb.Message.getField(msg, 5),
    enforcementorderspermitted: msg.getEnforcementorderspermitted(),
    votingrights: msg.getVotingrights(),
    votemultiplier: msg.getVotemultiplier(),
    administrationproposal: msg.getAdministrationproposal(),
    holderproposal: msg.getHolderproposal(),
    assetmodificationgovernance: msg.getAssetmodificationgovernance(),
    tokenqty: msg.getTokenqty(),
    assetpayload: msg.getAssetpayload_asB64(),
    assetrevision: msg.getAssetrevision(),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetCreationAction}
 */
proto.actions.AssetCreationAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetCreationAction;
  return proto.actions.AssetCreationAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetCreationAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetCreationAction}
 */
proto.actions.AssetCreationAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssetindex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetauthflags(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransferspermitted(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.getTraderestrictionsList().push(value);
      msg.setTraderestrictionsList(msg.getTraderestrictionsList());
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnforcementorderspermitted(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVotingrights(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotemultiplier(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdministrationproposal(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHolderproposal(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssetmodificationgovernance(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTokenqty(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetpayload(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssetrevision(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetCreationAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetCreationAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetCreationAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetCreationAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getAssetindex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getAssetauthflags_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getTransferspermitted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getTraderestrictionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = this.getEnforcementorderspermitted();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getVotingrights();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getVotemultiplier();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getAdministrationproposal();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = this.getHolderproposal();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = this.getAssetmodificationgovernance();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = this.getTokenqty();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = this.getAssetpayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = this.getAssetrevision();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AssetCreationAction} The clone.
 */
proto.actions.AssetCreationAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AssetCreationAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes AssetCode = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetCreationAction.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes AssetCode = 1;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.AssetCreationAction.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.AssetCreationAction.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetCreationAction.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 AssetIndex = 2;
 * @return {number}
 */
proto.actions.AssetCreationAction.prototype.getAssetindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.AssetCreationAction.prototype.setAssetindex = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes AssetAuthFlags = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetCreationAction.prototype.getAssetauthflags = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes AssetAuthFlags = 3;
 * This is a type-conversion wrapper around `getAssetauthflags()`
 * @return {string}
 */
proto.actions.AssetCreationAction.prototype.getAssetauthflags_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetauthflags()));
};


/**
 * optional bytes AssetAuthFlags = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetauthflags()`
 * @return {!Uint8Array}
 */
proto.actions.AssetCreationAction.prototype.getAssetauthflags_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetauthflags()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetCreationAction.prototype.setAssetauthflags = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool TransfersPermitted = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetCreationAction.prototype.getTransferspermitted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.actions.AssetCreationAction.prototype.setTransferspermitted = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated string TradeRestrictions = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.actions.AssetCreationAction.prototype.getTraderestrictionsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {Array.<string>} value  */
proto.actions.AssetCreationAction.prototype.setTraderestrictionsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


proto.actions.AssetCreationAction.prototype.clearTraderestrictionsList = function() {
  jspb.Message.setField(this, 5, []);
};


/**
 * optional bool EnforcementOrdersPermitted = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetCreationAction.prototype.getEnforcementorderspermitted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.actions.AssetCreationAction.prototype.setEnforcementorderspermitted = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool VotingRights = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetCreationAction.prototype.getVotingrights = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 7, false));
};


/** @param {boolean} value  */
proto.actions.AssetCreationAction.prototype.setVotingrights = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 VoteMultiplier = 8;
 * @return {number}
 */
proto.actions.AssetCreationAction.prototype.getVotemultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.actions.AssetCreationAction.prototype.setVotemultiplier = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bool AdministrationProposal = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetCreationAction.prototype.getAdministrationproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 9, false));
};


/** @param {boolean} value  */
proto.actions.AssetCreationAction.prototype.setAdministrationproposal = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool HolderProposal = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.AssetCreationAction.prototype.getHolderproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 10, false));
};


/** @param {boolean} value  */
proto.actions.AssetCreationAction.prototype.setHolderproposal = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint32 AssetModificationGovernance = 11;
 * @return {number}
 */
proto.actions.AssetCreationAction.prototype.getAssetmodificationgovernance = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.actions.AssetCreationAction.prototype.setAssetmodificationgovernance = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional uint64 TokenQty = 12;
 * @return {number}
 */
proto.actions.AssetCreationAction.prototype.getTokenqty = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.actions.AssetCreationAction.prototype.setTokenqty = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bytes AssetPayload = 13;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetCreationAction.prototype.getAssetpayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/**
 * optional bytes AssetPayload = 13;
 * This is a type-conversion wrapper around `getAssetpayload()`
 * @return {string}
 */
proto.actions.AssetCreationAction.prototype.getAssetpayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetpayload()));
};


/**
 * optional bytes AssetPayload = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetpayload()`
 * @return {!Uint8Array}
 */
proto.actions.AssetCreationAction.prototype.getAssetpayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetpayload()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetCreationAction.prototype.setAssetpayload = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional uint32 AssetRevision = 14;
 * @return {number}
 */
proto.actions.AssetCreationAction.prototype.getAssetrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 14, 0));
};


/** @param {number} value  */
proto.actions.AssetCreationAction.prototype.setAssetrevision = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional uint64 Timestamp = 15;
 * @return {number}
 */
proto.actions.AssetCreationAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 15, 0));
};


/** @param {number} value  */
proto.actions.AssetCreationAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetModificationAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetModificationAction.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetModificationAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AssetModificationAction.displayName = 'proto.actions.AssetModificationAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetModificationAction.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetModificationAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetModificationAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetModificationAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AssetModificationAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: msg.getAssettype(),
    assetcode: msg.getAssetcode_asB64(),
    assetrevision: msg.getAssetrevision(),
    amendmentsList: jspb.Message.toObjectList(msg.getAmendmentsList(),
    proto.actions.AmendmentField.toObject, includeInstance),
    reftxid: msg.getReftxid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetModificationAction}
 */
proto.actions.AssetModificationAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetModificationAction;
  return proto.actions.AssetModificationAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetModificationAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetModificationAction}
 */
proto.actions.AssetModificationAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssetrevision(value);
      break;
    case 4:
      var value = new proto.actions.AmendmentField;
      reader.readMessage(value,proto.actions.AmendmentField.deserializeBinaryFromReader);
      msg.getAmendmentsList().push(value);
      msg.setAmendmentsList(msg.getAmendmentsList());
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReftxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetModificationAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetModificationAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetModificationAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetModificationAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getAssetrevision();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getAmendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.AmendmentField.serializeBinaryToWriter
    );
  }
  f = this.getReftxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AssetModificationAction} The clone.
 */
proto.actions.AssetModificationAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AssetModificationAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string AssetType = 1;
 * @return {string}
 */
proto.actions.AssetModificationAction.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.AssetModificationAction.prototype.setAssettype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes AssetCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetModificationAction.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes AssetCode = 2;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.AssetModificationAction.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.AssetModificationAction.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetModificationAction.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 AssetRevision = 3;
 * @return {number}
 */
proto.actions.AssetModificationAction.prototype.getAssetrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.actions.AssetModificationAction.prototype.setAssetrevision = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated AmendmentField Amendments = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.AmendmentField>}
 */
proto.actions.AssetModificationAction.prototype.getAmendmentsList = function() {
  return /** @type{!Array.<!proto.actions.AmendmentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AmendmentField, 4));
};


/** @param {Array.<!proto.actions.AmendmentField>} value  */
proto.actions.AssetModificationAction.prototype.setAmendmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.actions.AssetModificationAction.prototype.clearAmendmentsList = function() {
  this.setAmendmentsList([]);
};


/**
 * optional bytes RefTxID = 5;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetModificationAction.prototype.getReftxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes RefTxID = 5;
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {string}
 */
proto.actions.AssetModificationAction.prototype.getReftxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReftxid()));
};


/**
 * optional bytes RefTxID = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {!Uint8Array}
 */
proto.actions.AssetModificationAction.prototype.getReftxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReftxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetModificationAction.prototype.setReftxid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.TransferAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.TransferAction.repeatedFields_, null);
};
goog.inherits(proto.actions.TransferAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.TransferAction.displayName = 'proto.actions.TransferAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.TransferAction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.TransferAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.TransferAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.TransferAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.TransferAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.actions.AssetTransferField.toObject, includeInstance),
    offerexpiry: msg.getOfferexpiry(),
    exchangefee: msg.getExchangefee(),
    exchangefeeaddress: msg.getExchangefeeaddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.TransferAction}
 */
proto.actions.TransferAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.TransferAction;
  return proto.actions.TransferAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.TransferAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.TransferAction}
 */
proto.actions.TransferAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.actions.AssetTransferField;
      reader.readMessage(value,proto.actions.AssetTransferField.deserializeBinaryFromReader);
      msg.getAssetsList().push(value);
      msg.setAssetsList(msg.getAssetsList());
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOfferexpiry(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangefee(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExchangefeeaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.TransferAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.TransferAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.TransferAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.TransferAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.actions.AssetTransferField.serializeBinaryToWriter
    );
  }
  f = this.getOfferexpiry();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getExchangefee();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getExchangefeeaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.TransferAction} The clone.
 */
proto.actions.TransferAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.TransferAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated AssetTransferField Assets = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.AssetTransferField>}
 */
proto.actions.TransferAction.prototype.getAssetsList = function() {
  return /** @type{!Array.<!proto.actions.AssetTransferField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AssetTransferField, 1));
};


/** @param {Array.<!proto.actions.AssetTransferField>} value  */
proto.actions.TransferAction.prototype.setAssetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.actions.TransferAction.prototype.clearAssetsList = function() {
  this.setAssetsList([]);
};


/**
 * optional uint64 OfferExpiry = 2;
 * @return {number}
 */
proto.actions.TransferAction.prototype.getOfferexpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.TransferAction.prototype.setOfferexpiry = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 ExchangeFee = 3;
 * @return {number}
 */
proto.actions.TransferAction.prototype.getExchangefee = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.actions.TransferAction.prototype.setExchangefee = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes ExchangeFeeAddress = 4;
 * @return {!(string|Uint8Array)}
 */
proto.actions.TransferAction.prototype.getExchangefeeaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes ExchangeFeeAddress = 4;
 * This is a type-conversion wrapper around `getExchangefeeaddress()`
 * @return {string}
 */
proto.actions.TransferAction.prototype.getExchangefeeaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExchangefeeaddress()));
};


/**
 * optional bytes ExchangeFeeAddress = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExchangefeeaddress()`
 * @return {!Uint8Array}
 */
proto.actions.TransferAction.prototype.getExchangefeeaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExchangefeeaddress()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.TransferAction.prototype.setExchangefeeaddress = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.SettlementAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.SettlementAction.repeatedFields_, null);
};
goog.inherits(proto.actions.SettlementAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.SettlementAction.displayName = 'proto.actions.SettlementAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.SettlementAction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.SettlementAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.SettlementAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.SettlementAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.SettlementAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.actions.AssetSettlementField.toObject, includeInstance),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.SettlementAction}
 */
proto.actions.SettlementAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.SettlementAction;
  return proto.actions.SettlementAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.SettlementAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.SettlementAction}
 */
proto.actions.SettlementAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.actions.AssetSettlementField;
      reader.readMessage(value,proto.actions.AssetSettlementField.deserializeBinaryFromReader);
      msg.getAssetsList().push(value);
      msg.setAssetsList(msg.getAssetsList());
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.SettlementAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.SettlementAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.SettlementAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.SettlementAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.actions.AssetSettlementField.serializeBinaryToWriter
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.SettlementAction} The clone.
 */
proto.actions.SettlementAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.SettlementAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated AssetSettlementField Assets = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.AssetSettlementField>}
 */
proto.actions.SettlementAction.prototype.getAssetsList = function() {
  return /** @type{!Array.<!proto.actions.AssetSettlementField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AssetSettlementField, 1));
};


/** @param {Array.<!proto.actions.AssetSettlementField>} value  */
proto.actions.SettlementAction.prototype.setAssetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.actions.SettlementAction.prototype.clearAssetsList = function() {
  this.setAssetsList([]);
};


/**
 * optional uint64 Timestamp = 2;
 * @return {number}
 */
proto.actions.SettlementAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.SettlementAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ProposalAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ProposalAction.repeatedFields_, null);
};
goog.inherits(proto.actions.ProposalAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ProposalAction.displayName = 'proto.actions.ProposalAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ProposalAction.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ProposalAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ProposalAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ProposalAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ProposalAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    initiator: msg.getInitiator(),
    assetspecificvote: msg.getAssetspecificvote(),
    assettype: msg.getAssettype(),
    assetcode: msg.getAssetcode_asB64(),
    votesystem: msg.getVotesystem(),
    specific: msg.getSpecific(),
    proposedamendmentsList: jspb.Message.toObjectList(msg.getProposedamendmentsList(),
    proto.actions.AmendmentField.toObject, includeInstance),
    voteoptions: msg.getVoteoptions(),
    votemax: msg.getVotemax(),
    proposaldescription: msg.getProposaldescription(),
    proposaldocumenthash: msg.getProposaldocumenthash_asB64(),
    votecutofftimestamp: msg.getVotecutofftimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ProposalAction}
 */
proto.actions.ProposalAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ProposalAction;
  return proto.actions.ProposalAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ProposalAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ProposalAction}
 */
proto.actions.ProposalAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInitiator(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAssetspecificvote(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotesystem(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpecific(value);
      break;
    case 7:
      var value = new proto.actions.AmendmentField;
      reader.readMessage(value,proto.actions.AmendmentField.deserializeBinaryFromReader);
      msg.getProposedamendmentsList().push(value);
      msg.setProposedamendmentsList(msg.getProposedamendmentsList());
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoteoptions(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotemax(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposaldescription(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposaldocumenthash(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVotecutofftimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ProposalAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ProposalAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ProposalAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ProposalAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInitiator();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAssetspecificvote();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getVotesystem();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getSpecific();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getProposedamendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.actions.AmendmentField.serializeBinaryToWriter
    );
  }
  f = this.getVoteoptions();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getVotemax();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getProposaldescription();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getProposaldocumenthash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = this.getVotecutofftimestamp();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ProposalAction} The clone.
 */
proto.actions.ProposalAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ProposalAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 Initiator = 1;
 * @return {number}
 */
proto.actions.ProposalAction.prototype.getInitiator = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.actions.ProposalAction.prototype.setInitiator = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool AssetSpecificVote = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ProposalAction.prototype.getAssetspecificvote = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.actions.ProposalAction.prototype.setAssetspecificvote = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string AssetType = 3;
 * @return {string}
 */
proto.actions.ProposalAction.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.actions.ProposalAction.prototype.setAssettype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes AssetCode = 4;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ProposalAction.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes AssetCode = 4;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.ProposalAction.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.ProposalAction.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ProposalAction.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 VoteSystem = 5;
 * @return {number}
 */
proto.actions.ProposalAction.prototype.getVotesystem = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.actions.ProposalAction.prototype.setVotesystem = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool Specific = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ProposalAction.prototype.getSpecific = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.actions.ProposalAction.prototype.setSpecific = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated AmendmentField ProposedAmendments = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.AmendmentField>}
 */
proto.actions.ProposalAction.prototype.getProposedamendmentsList = function() {
  return /** @type{!Array.<!proto.actions.AmendmentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AmendmentField, 7));
};


/** @param {Array.<!proto.actions.AmendmentField>} value  */
proto.actions.ProposalAction.prototype.setProposedamendmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


proto.actions.ProposalAction.prototype.clearProposedamendmentsList = function() {
  this.setProposedamendmentsList([]);
};


/**
 * optional string VoteOptions = 8;
 * @return {string}
 */
proto.actions.ProposalAction.prototype.getVoteoptions = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.actions.ProposalAction.prototype.setVoteoptions = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 VoteMax = 9;
 * @return {number}
 */
proto.actions.ProposalAction.prototype.getVotemax = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.actions.ProposalAction.prototype.setVotemax = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string ProposalDescription = 10;
 * @return {string}
 */
proto.actions.ProposalAction.prototype.getProposaldescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.actions.ProposalAction.prototype.setProposaldescription = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bytes ProposalDocumentHash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ProposalAction.prototype.getProposaldocumenthash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/**
 * optional bytes ProposalDocumentHash = 11;
 * This is a type-conversion wrapper around `getProposaldocumenthash()`
 * @return {string}
 */
proto.actions.ProposalAction.prototype.getProposaldocumenthash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposaldocumenthash()));
};


/**
 * optional bytes ProposalDocumentHash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposaldocumenthash()`
 * @return {!Uint8Array}
 */
proto.actions.ProposalAction.prototype.getProposaldocumenthash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposaldocumenthash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ProposalAction.prototype.setProposaldocumenthash = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional uint64 VoteCutOffTimestamp = 12;
 * @return {number}
 */
proto.actions.ProposalAction.prototype.getVotecutofftimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.actions.ProposalAction.prototype.setVotecutofftimestamp = function(value) {
  jspb.Message.setField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.VoteAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.VoteAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.VoteAction.displayName = 'proto.actions.VoteAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.VoteAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.VoteAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.VoteAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.VoteAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.VoteAction}
 */
proto.actions.VoteAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.VoteAction;
  return proto.actions.VoteAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.VoteAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.VoteAction}
 */
proto.actions.VoteAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.VoteAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.VoteAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.VoteAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.VoteAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.VoteAction} The clone.
 */
proto.actions.VoteAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.VoteAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.actions.VoteAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.actions.VoteAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.BallotCastAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.BallotCastAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.BallotCastAction.displayName = 'proto.actions.BallotCastAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.BallotCastAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.BallotCastAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.BallotCastAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.BallotCastAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    votetxid: msg.getVotetxid_asB64(),
    vote: msg.getVote()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.BallotCastAction}
 */
proto.actions.BallotCastAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.BallotCastAction;
  return proto.actions.BallotCastAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.BallotCastAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.BallotCastAction}
 */
proto.actions.BallotCastAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotetxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.BallotCastAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.BallotCastAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.BallotCastAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.BallotCastAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVotetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getVote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.BallotCastAction} The clone.
 */
proto.actions.BallotCastAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.BallotCastAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes VoteTxId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.BallotCastAction.prototype.getVotetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes VoteTxId = 1;
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {string}
 */
proto.actions.BallotCastAction.prototype.getVotetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotetxid()));
};


/**
 * optional bytes VoteTxId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {!Uint8Array}
 */
proto.actions.BallotCastAction.prototype.getVotetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotetxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.BallotCastAction.prototype.setVotetxid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Vote = 2;
 * @return {string}
 */
proto.actions.BallotCastAction.prototype.getVote = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.BallotCastAction.prototype.setVote = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.BallotCountedAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.BallotCountedAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.BallotCountedAction.displayName = 'proto.actions.BallotCountedAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.BallotCountedAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.BallotCountedAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.BallotCountedAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.BallotCountedAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    votetxid: msg.getVotetxid_asB64(),
    vote: msg.getVote(),
    quantity: msg.getQuantity(),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.BallotCountedAction}
 */
proto.actions.BallotCountedAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.BallotCountedAction;
  return proto.actions.BallotCountedAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.BallotCountedAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.BallotCountedAction}
 */
proto.actions.BallotCountedAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotetxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVote(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.BallotCountedAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.BallotCountedAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.BallotCountedAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.BallotCountedAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVotetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getVote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.BallotCountedAction} The clone.
 */
proto.actions.BallotCountedAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.BallotCountedAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes VoteTxId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.BallotCountedAction.prototype.getVotetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes VoteTxId = 1;
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {string}
 */
proto.actions.BallotCountedAction.prototype.getVotetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotetxid()));
};


/**
 * optional bytes VoteTxId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {!Uint8Array}
 */
proto.actions.BallotCountedAction.prototype.getVotetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotetxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.BallotCountedAction.prototype.setVotetxid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Vote = 2;
 * @return {string}
 */
proto.actions.BallotCountedAction.prototype.getVote = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.BallotCountedAction.prototype.setVote = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 Quantity = 3;
 * @return {number}
 */
proto.actions.BallotCountedAction.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.actions.BallotCountedAction.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 Timestamp = 4;
 * @return {number}
 */
proto.actions.BallotCountedAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.actions.BallotCountedAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ResultAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ResultAction.repeatedFields_, null);
};
goog.inherits(proto.actions.ResultAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ResultAction.displayName = 'proto.actions.ResultAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ResultAction.repeatedFields_ = [5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ResultAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ResultAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ResultAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ResultAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetspecificvote: msg.getAssetspecificvote(),
    assettype: msg.getAssettype(),
    assetcode: msg.getAssetcode_asB64(),
    specific: msg.getSpecific(),
    proposedamendmentsList: jspb.Message.toObjectList(msg.getProposedamendmentsList(),
    proto.actions.AmendmentField.toObject, includeInstance),
    votetxid: msg.getVotetxid_asB64(),
    optiontallyList: jspb.Message.getField(msg, 7),
    result: msg.getResult(),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ResultAction}
 */
proto.actions.ResultAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ResultAction;
  return proto.actions.ResultAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ResultAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ResultAction}
 */
proto.actions.ResultAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAssetspecificvote(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpecific(value);
      break;
    case 5:
      var value = new proto.actions.AmendmentField;
      reader.readMessage(value,proto.actions.AmendmentField.deserializeBinaryFromReader);
      msg.getProposedamendmentsList().push(value);
      msg.setProposedamendmentsList(msg.getProposedamendmentsList());
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotetxid(value);
      break;
    case 7:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setOptiontallyList(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ResultAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ResultAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ResultAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ResultAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssetspecificvote();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getSpecific();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getProposedamendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.actions.AmendmentField.serializeBinaryToWriter
    );
  }
  f = this.getVotetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getOptiontallyList();
  if (f.length > 0) {
    writer.writePackedUint64(
      7,
      f
    );
  }
  f = this.getResult();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ResultAction} The clone.
 */
proto.actions.ResultAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ResultAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool AssetSpecificVote = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ResultAction.prototype.getAssetspecificvote = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.actions.ResultAction.prototype.setAssetspecificvote = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string AssetType = 2;
 * @return {string}
 */
proto.actions.ResultAction.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.ResultAction.prototype.setAssettype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes AssetCode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ResultAction.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes AssetCode = 3;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.ResultAction.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.ResultAction.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ResultAction.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool Specific = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.ResultAction.prototype.getSpecific = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.actions.ResultAction.prototype.setSpecific = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated AmendmentField ProposedAmendments = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.AmendmentField>}
 */
proto.actions.ResultAction.prototype.getProposedamendmentsList = function() {
  return /** @type{!Array.<!proto.actions.AmendmentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AmendmentField, 5));
};


/** @param {Array.<!proto.actions.AmendmentField>} value  */
proto.actions.ResultAction.prototype.setProposedamendmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.actions.ResultAction.prototype.clearProposedamendmentsList = function() {
  this.setProposedamendmentsList([]);
};


/**
 * optional bytes VoteTxId = 6;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ResultAction.prototype.getVotetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes VoteTxId = 6;
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {string}
 */
proto.actions.ResultAction.prototype.getVotetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotetxid()));
};


/**
 * optional bytes VoteTxId = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {!Uint8Array}
 */
proto.actions.ResultAction.prototype.getVotetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotetxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ResultAction.prototype.setVotetxid = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated uint64 OptionTally = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.actions.ResultAction.prototype.getOptiontallyList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 7));
};


/** @param {Array.<number>} value  */
proto.actions.ResultAction.prototype.setOptiontallyList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


proto.actions.ResultAction.prototype.clearOptiontallyList = function() {
  jspb.Message.setField(this, 7, []);
};


/**
 * optional string Result = 8;
 * @return {string}
 */
proto.actions.ResultAction.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.actions.ResultAction.prototype.setResult = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint64 Timestamp = 9;
 * @return {number}
 */
proto.actions.ResultAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.actions.ResultAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.OrderAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.OrderAction.repeatedFields_, null);
};
goog.inherits(proto.actions.OrderAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.OrderAction.displayName = 'proto.actions.OrderAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.OrderAction.repeatedFields_ = [4,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.OrderAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.OrderAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.OrderAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.OrderAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    complianceaction: msg.getComplianceaction(),
    assettype: msg.getAssettype(),
    assetcode: msg.getAssetcode_asB64(),
    targetaddressesList: jspb.Message.toObjectList(msg.getTargetaddressesList(),
    proto.actions.TargetAddressField.toObject, includeInstance),
    freezetxid: msg.getFreezetxid_asB64(),
    freezeperiod: msg.getFreezeperiod(),
    depositaddress: msg.getDepositaddress_asB64(),
    authorityincluded: msg.getAuthorityincluded(),
    authorityname: msg.getAuthorityname(),
    authoritypublickey: msg.getAuthoritypublickey_asB64(),
    signaturealgorithm: msg.getSignaturealgorithm(),
    ordersignature: msg.getOrdersignature_asB64(),
    supportingevidencehash: msg.getSupportingevidencehash_asB64(),
    reftxs: msg.getReftxs_asB64(),
    bitcoindispersionsList: jspb.Message.toObjectList(msg.getBitcoindispersionsList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    message: msg.getMessage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.OrderAction}
 */
proto.actions.OrderAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.OrderAction;
  return proto.actions.OrderAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.OrderAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.OrderAction}
 */
proto.actions.OrderAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComplianceaction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 4:
      var value = new proto.actions.TargetAddressField;
      reader.readMessage(value,proto.actions.TargetAddressField.deserializeBinaryFromReader);
      msg.getTargetaddressesList().push(value);
      msg.setTargetaddressesList(msg.getTargetaddressesList());
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFreezetxid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreezeperiod(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDepositaddress(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthorityincluded(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorityname(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthoritypublickey(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSignaturealgorithm(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrdersignature(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSupportingevidencehash(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReftxs(value);
      break;
    case 15:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.getBitcoindispersionsList().push(value);
      msg.setBitcoindispersionsList(msg.getBitcoindispersionsList());
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.OrderAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.OrderAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.OrderAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.OrderAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getComplianceaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getTargetaddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.TargetAddressField.serializeBinaryToWriter
    );
  }
  f = this.getFreezetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getFreezeperiod();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = this.getDepositaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = this.getAuthorityincluded();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = this.getAuthorityname();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getAuthoritypublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = this.getSignaturealgorithm();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = this.getOrdersignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = this.getSupportingevidencehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = this.getReftxs_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = this.getBitcoindispersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.OrderAction} The clone.
 */
proto.actions.OrderAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.OrderAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string ComplianceAction = 1;
 * @return {string}
 */
proto.actions.OrderAction.prototype.getComplianceaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.OrderAction.prototype.setComplianceaction = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string AssetType = 2;
 * @return {string}
 */
proto.actions.OrderAction.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.OrderAction.prototype.setAssettype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes AssetCode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.OrderAction.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes AssetCode = 3;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.OrderAction.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.OrderAction.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.OrderAction.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated TargetAddressField TargetAddresses = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.TargetAddressField>}
 */
proto.actions.OrderAction.prototype.getTargetaddressesList = function() {
  return /** @type{!Array.<!proto.actions.TargetAddressField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.TargetAddressField, 4));
};


/** @param {Array.<!proto.actions.TargetAddressField>} value  */
proto.actions.OrderAction.prototype.setTargetaddressesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.actions.OrderAction.prototype.clearTargetaddressesList = function() {
  this.setTargetaddressesList([]);
};


/**
 * optional bytes FreezeTxId = 5;
 * @return {!(string|Uint8Array)}
 */
proto.actions.OrderAction.prototype.getFreezetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes FreezeTxId = 5;
 * This is a type-conversion wrapper around `getFreezetxid()`
 * @return {string}
 */
proto.actions.OrderAction.prototype.getFreezetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFreezetxid()));
};


/**
 * optional bytes FreezeTxId = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFreezetxid()`
 * @return {!Uint8Array}
 */
proto.actions.OrderAction.prototype.getFreezetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFreezetxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.OrderAction.prototype.setFreezetxid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint64 FreezePeriod = 6;
 * @return {number}
 */
proto.actions.OrderAction.prototype.getFreezeperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.actions.OrderAction.prototype.setFreezeperiod = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes DepositAddress = 7;
 * @return {!(string|Uint8Array)}
 */
proto.actions.OrderAction.prototype.getDepositaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/**
 * optional bytes DepositAddress = 7;
 * This is a type-conversion wrapper around `getDepositaddress()`
 * @return {string}
 */
proto.actions.OrderAction.prototype.getDepositaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDepositaddress()));
};


/**
 * optional bytes DepositAddress = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDepositaddress()`
 * @return {!Uint8Array}
 */
proto.actions.OrderAction.prototype.getDepositaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDepositaddress()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.OrderAction.prototype.setDepositaddress = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool AuthorityIncluded = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.OrderAction.prototype.getAuthorityincluded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 8, false));
};


/** @param {boolean} value  */
proto.actions.OrderAction.prototype.setAuthorityincluded = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string AuthorityName = 9;
 * @return {string}
 */
proto.actions.OrderAction.prototype.getAuthorityname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.actions.OrderAction.prototype.setAuthorityname = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes AuthorityPublicKey = 10;
 * @return {!(string|Uint8Array)}
 */
proto.actions.OrderAction.prototype.getAuthoritypublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/**
 * optional bytes AuthorityPublicKey = 10;
 * This is a type-conversion wrapper around `getAuthoritypublickey()`
 * @return {string}
 */
proto.actions.OrderAction.prototype.getAuthoritypublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthoritypublickey()));
};


/**
 * optional bytes AuthorityPublicKey = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthoritypublickey()`
 * @return {!Uint8Array}
 */
proto.actions.OrderAction.prototype.getAuthoritypublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthoritypublickey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.OrderAction.prototype.setAuthoritypublickey = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint32 SignatureAlgorithm = 11;
 * @return {number}
 */
proto.actions.OrderAction.prototype.getSignaturealgorithm = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.actions.OrderAction.prototype.setSignaturealgorithm = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bytes OrderSignature = 12;
 * @return {!(string|Uint8Array)}
 */
proto.actions.OrderAction.prototype.getOrdersignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/**
 * optional bytes OrderSignature = 12;
 * This is a type-conversion wrapper around `getOrdersignature()`
 * @return {string}
 */
proto.actions.OrderAction.prototype.getOrdersignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrdersignature()));
};


/**
 * optional bytes OrderSignature = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrdersignature()`
 * @return {!Uint8Array}
 */
proto.actions.OrderAction.prototype.getOrdersignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrdersignature()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.OrderAction.prototype.setOrdersignature = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bytes SupportingEvidenceHash = 13;
 * @return {!(string|Uint8Array)}
 */
proto.actions.OrderAction.prototype.getSupportingevidencehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/**
 * optional bytes SupportingEvidenceHash = 13;
 * This is a type-conversion wrapper around `getSupportingevidencehash()`
 * @return {string}
 */
proto.actions.OrderAction.prototype.getSupportingevidencehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSupportingevidencehash()));
};


/**
 * optional bytes SupportingEvidenceHash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSupportingevidencehash()`
 * @return {!Uint8Array}
 */
proto.actions.OrderAction.prototype.getSupportingevidencehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSupportingevidencehash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.OrderAction.prototype.setSupportingevidencehash = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional bytes RefTxs = 14;
 * @return {!(string|Uint8Array)}
 */
proto.actions.OrderAction.prototype.getReftxs = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 14, ""));
};


/**
 * optional bytes RefTxs = 14;
 * This is a type-conversion wrapper around `getReftxs()`
 * @return {string}
 */
proto.actions.OrderAction.prototype.getReftxs_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReftxs()));
};


/**
 * optional bytes RefTxs = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReftxs()`
 * @return {!Uint8Array}
 */
proto.actions.OrderAction.prototype.getReftxs_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReftxs()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.OrderAction.prototype.setReftxs = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * repeated QuantityIndexField BitcoinDispersions = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.QuantityIndexField>}
 */
proto.actions.OrderAction.prototype.getBitcoindispersionsList = function() {
  return /** @type{!Array.<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 15));
};


/** @param {Array.<!proto.actions.QuantityIndexField>} value  */
proto.actions.OrderAction.prototype.setBitcoindispersionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


proto.actions.OrderAction.prototype.clearBitcoindispersionsList = function() {
  this.setBitcoindispersionsList([]);
};


/**
 * optional string Message = 16;
 * @return {string}
 */
proto.actions.OrderAction.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 16, ""));
};


/** @param {string} value  */
proto.actions.OrderAction.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.FreezeAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.FreezeAction.repeatedFields_, null);
};
goog.inherits(proto.actions.FreezeAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.FreezeAction.displayName = 'proto.actions.FreezeAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.FreezeAction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.FreezeAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.FreezeAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.FreezeAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.FreezeAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: msg.getAssettype(),
    assetcode: msg.getAssetcode_asB64(),
    quantitiesList: jspb.Message.toObjectList(msg.getQuantitiesList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    freezeperiod: msg.getFreezeperiod(),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.FreezeAction}
 */
proto.actions.FreezeAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.FreezeAction;
  return proto.actions.FreezeAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.FreezeAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.FreezeAction}
 */
proto.actions.FreezeAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 3:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.getQuantitiesList().push(value);
      msg.setQuantitiesList(msg.getQuantitiesList());
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreezeperiod(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.FreezeAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.FreezeAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.FreezeAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.FreezeAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getQuantitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = this.getFreezeperiod();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.FreezeAction} The clone.
 */
proto.actions.FreezeAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.FreezeAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string AssetType = 1;
 * @return {string}
 */
proto.actions.FreezeAction.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.FreezeAction.prototype.setAssettype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes AssetCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.FreezeAction.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes AssetCode = 2;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.FreezeAction.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.FreezeAction.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.FreezeAction.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated QuantityIndexField Quantities = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.QuantityIndexField>}
 */
proto.actions.FreezeAction.prototype.getQuantitiesList = function() {
  return /** @type{!Array.<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 3));
};


/** @param {Array.<!proto.actions.QuantityIndexField>} value  */
proto.actions.FreezeAction.prototype.setQuantitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.actions.FreezeAction.prototype.clearQuantitiesList = function() {
  this.setQuantitiesList([]);
};


/**
 * optional uint64 FreezePeriod = 4;
 * @return {number}
 */
proto.actions.FreezeAction.prototype.getFreezeperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.actions.FreezeAction.prototype.setFreezeperiod = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 Timestamp = 5;
 * @return {number}
 */
proto.actions.FreezeAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.actions.FreezeAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ThawAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.ThawAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ThawAction.displayName = 'proto.actions.ThawAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ThawAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ThawAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ThawAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ThawAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    freezetxid: msg.getFreezetxid_asB64(),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ThawAction}
 */
proto.actions.ThawAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ThawAction;
  return proto.actions.ThawAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ThawAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ThawAction}
 */
proto.actions.ThawAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFreezetxid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ThawAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ThawAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ThawAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ThawAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFreezetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ThawAction} The clone.
 */
proto.actions.ThawAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ThawAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes FreezeTxId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ThawAction.prototype.getFreezetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes FreezeTxId = 1;
 * This is a type-conversion wrapper around `getFreezetxid()`
 * @return {string}
 */
proto.actions.ThawAction.prototype.getFreezetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFreezetxid()));
};


/**
 * optional bytes FreezeTxId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFreezetxid()`
 * @return {!Uint8Array}
 */
proto.actions.ThawAction.prototype.getFreezetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFreezetxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ThawAction.prototype.setFreezetxid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 Timestamp = 2;
 * @return {number}
 */
proto.actions.ThawAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.ThawAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ConfiscationAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ConfiscationAction.repeatedFields_, null);
};
goog.inherits(proto.actions.ConfiscationAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ConfiscationAction.displayName = 'proto.actions.ConfiscationAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ConfiscationAction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ConfiscationAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ConfiscationAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ConfiscationAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ConfiscationAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: msg.getAssettype(),
    assetcode: msg.getAssetcode_asB64(),
    quantitiesList: jspb.Message.toObjectList(msg.getQuantitiesList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    depositqty: msg.getDepositqty(),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ConfiscationAction}
 */
proto.actions.ConfiscationAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ConfiscationAction;
  return proto.actions.ConfiscationAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ConfiscationAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ConfiscationAction}
 */
proto.actions.ConfiscationAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 3:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.getQuantitiesList().push(value);
      msg.setQuantitiesList(msg.getQuantitiesList());
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositqty(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ConfiscationAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ConfiscationAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ConfiscationAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ConfiscationAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getQuantitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = this.getDepositqty();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ConfiscationAction} The clone.
 */
proto.actions.ConfiscationAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ConfiscationAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string AssetType = 1;
 * @return {string}
 */
proto.actions.ConfiscationAction.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.ConfiscationAction.prototype.setAssettype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes AssetCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ConfiscationAction.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes AssetCode = 2;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.ConfiscationAction.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.ConfiscationAction.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ConfiscationAction.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated QuantityIndexField Quantities = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.QuantityIndexField>}
 */
proto.actions.ConfiscationAction.prototype.getQuantitiesList = function() {
  return /** @type{!Array.<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 3));
};


/** @param {Array.<!proto.actions.QuantityIndexField>} value  */
proto.actions.ConfiscationAction.prototype.setQuantitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.actions.ConfiscationAction.prototype.clearQuantitiesList = function() {
  this.setQuantitiesList([]);
};


/**
 * optional uint64 DepositQty = 4;
 * @return {number}
 */
proto.actions.ConfiscationAction.prototype.getDepositqty = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.actions.ConfiscationAction.prototype.setDepositqty = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 Timestamp = 5;
 * @return {number}
 */
proto.actions.ConfiscationAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.actions.ConfiscationAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ReconciliationAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ReconciliationAction.repeatedFields_, null);
};
goog.inherits(proto.actions.ReconciliationAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ReconciliationAction.displayName = 'proto.actions.ReconciliationAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ReconciliationAction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ReconciliationAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ReconciliationAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ReconciliationAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ReconciliationAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: msg.getAssettype(),
    assetcode: msg.getAssetcode_asB64(),
    quantitiesList: jspb.Message.toObjectList(msg.getQuantitiesList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ReconciliationAction}
 */
proto.actions.ReconciliationAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ReconciliationAction;
  return proto.actions.ReconciliationAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ReconciliationAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ReconciliationAction}
 */
proto.actions.ReconciliationAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 3:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.getQuantitiesList().push(value);
      msg.setQuantitiesList(msg.getQuantitiesList());
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ReconciliationAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ReconciliationAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ReconciliationAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ReconciliationAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getQuantitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ReconciliationAction} The clone.
 */
proto.actions.ReconciliationAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ReconciliationAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string AssetType = 1;
 * @return {string}
 */
proto.actions.ReconciliationAction.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.ReconciliationAction.prototype.setAssettype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes AssetCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ReconciliationAction.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes AssetCode = 2;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.ReconciliationAction.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.ReconciliationAction.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.ReconciliationAction.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated QuantityIndexField Quantities = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.QuantityIndexField>}
 */
proto.actions.ReconciliationAction.prototype.getQuantitiesList = function() {
  return /** @type{!Array.<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 3));
};


/** @param {Array.<!proto.actions.QuantityIndexField>} value  */
proto.actions.ReconciliationAction.prototype.setQuantitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.actions.ReconciliationAction.prototype.clearQuantitiesList = function() {
  this.setQuantitiesList([]);
};


/**
 * optional uint64 Timestamp = 4;
 * @return {number}
 */
proto.actions.ReconciliationAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.actions.ReconciliationAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.EstablishmentAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.EstablishmentAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.EstablishmentAction.displayName = 'proto.actions.EstablishmentAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.EstablishmentAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.EstablishmentAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.EstablishmentAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.EstablishmentAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: msg.getMessage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.EstablishmentAction}
 */
proto.actions.EstablishmentAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.EstablishmentAction;
  return proto.actions.EstablishmentAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.EstablishmentAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.EstablishmentAction}
 */
proto.actions.EstablishmentAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.EstablishmentAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.EstablishmentAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.EstablishmentAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.EstablishmentAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.EstablishmentAction} The clone.
 */
proto.actions.EstablishmentAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.EstablishmentAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Message = 1;
 * @return {string}
 */
proto.actions.EstablishmentAction.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.EstablishmentAction.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AdditionAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.AdditionAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AdditionAction.displayName = 'proto.actions.AdditionAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AdditionAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AdditionAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AdditionAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AdditionAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: msg.getMessage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AdditionAction}
 */
proto.actions.AdditionAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AdditionAction;
  return proto.actions.AdditionAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AdditionAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AdditionAction}
 */
proto.actions.AdditionAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AdditionAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AdditionAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AdditionAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AdditionAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AdditionAction} The clone.
 */
proto.actions.AdditionAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AdditionAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Message = 1;
 * @return {string}
 */
proto.actions.AdditionAction.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.AdditionAction.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AlterationAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.AlterationAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AlterationAction.displayName = 'proto.actions.AlterationAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AlterationAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AlterationAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AlterationAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AlterationAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    entrytxid: msg.getEntrytxid_asB64(),
    message: msg.getMessage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AlterationAction}
 */
proto.actions.AlterationAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AlterationAction;
  return proto.actions.AlterationAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AlterationAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AlterationAction}
 */
proto.actions.AlterationAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntrytxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AlterationAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AlterationAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AlterationAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AlterationAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEntrytxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AlterationAction} The clone.
 */
proto.actions.AlterationAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AlterationAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes EntryTxID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AlterationAction.prototype.getEntrytxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes EntryTxID = 1;
 * This is a type-conversion wrapper around `getEntrytxid()`
 * @return {string}
 */
proto.actions.AlterationAction.prototype.getEntrytxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntrytxid()));
};


/**
 * optional bytes EntryTxID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntrytxid()`
 * @return {!Uint8Array}
 */
proto.actions.AlterationAction.prototype.getEntrytxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntrytxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AlterationAction.prototype.setEntrytxid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.actions.AlterationAction.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.AlterationAction.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.RemovalAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.RemovalAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.RemovalAction.displayName = 'proto.actions.RemovalAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.RemovalAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.RemovalAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.RemovalAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.RemovalAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    entrytxid: msg.getEntrytxid_asB64(),
    message: msg.getMessage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.RemovalAction}
 */
proto.actions.RemovalAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.RemovalAction;
  return proto.actions.RemovalAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.RemovalAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.RemovalAction}
 */
proto.actions.RemovalAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntrytxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.RemovalAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.RemovalAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.RemovalAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.RemovalAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEntrytxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.RemovalAction} The clone.
 */
proto.actions.RemovalAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.RemovalAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes EntryTxID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.RemovalAction.prototype.getEntrytxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes EntryTxID = 1;
 * This is a type-conversion wrapper around `getEntrytxid()`
 * @return {string}
 */
proto.actions.RemovalAction.prototype.getEntrytxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntrytxid()));
};


/**
 * optional bytes EntryTxID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntrytxid()`
 * @return {!Uint8Array}
 */
proto.actions.RemovalAction.prototype.getEntrytxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntrytxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.RemovalAction.prototype.setEntrytxid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.actions.RemovalAction.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.RemovalAction.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.MessageAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.MessageAction.repeatedFields_, null);
};
goog.inherits(proto.actions.MessageAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.MessageAction.displayName = 'proto.actions.MessageAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.MessageAction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.MessageAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.MessageAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.MessageAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.MessageAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressindexesList: jspb.Message.getField(msg, 1),
    messagepayload: msg.getMessagepayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.MessageAction}
 */
proto.actions.MessageAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.MessageAction;
  return proto.actions.MessageAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.MessageAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.MessageAction}
 */
proto.actions.MessageAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAddressindexesList(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessagepayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.MessageAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.MessageAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.MessageAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.MessageAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddressindexesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = this.getMessagepayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.MessageAction} The clone.
 */
proto.actions.MessageAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.MessageAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated uint32 AddressIndexes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.actions.MessageAction.prototype.getAddressindexesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<number>} value  */
proto.actions.MessageAction.prototype.setAddressindexesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.actions.MessageAction.prototype.clearAddressindexesList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * optional bytes MessagePayload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.MessageAction.prototype.getMessagepayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes MessagePayload = 2;
 * This is a type-conversion wrapper around `getMessagepayload()`
 * @return {string}
 */
proto.actions.MessageAction.prototype.getMessagepayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessagepayload()));
};


/**
 * optional bytes MessagePayload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessagepayload()`
 * @return {!Uint8Array}
 */
proto.actions.MessageAction.prototype.getMessagepayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessagepayload()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.MessageAction.prototype.setMessagepayload = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.RejectionAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.RejectionAction.repeatedFields_, null);
};
goog.inherits(proto.actions.RejectionAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.RejectionAction.displayName = 'proto.actions.RejectionAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.RejectionAction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.RejectionAction.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.RejectionAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.RejectionAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.RejectionAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressindexesList: jspb.Message.getField(msg, 1),
    rejectaddressindex: msg.getRejectaddressindex(),
    rejectioncode: msg.getRejectioncode(),
    message: msg.getMessage(),
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.RejectionAction}
 */
proto.actions.RejectionAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.RejectionAction;
  return proto.actions.RejectionAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.RejectionAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.RejectionAction}
 */
proto.actions.RejectionAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAddressindexesList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRejectaddressindex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRejectioncode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.RejectionAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.RejectionAction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.RejectionAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.RejectionAction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddressindexesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = this.getRejectaddressindex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getRejectioncode();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.RejectionAction} The clone.
 */
proto.actions.RejectionAction.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.RejectionAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated uint32 AddressIndexes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.actions.RejectionAction.prototype.getAddressindexesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<number>} value  */
proto.actions.RejectionAction.prototype.setAddressindexesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.actions.RejectionAction.prototype.clearAddressindexesList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * optional uint32 RejectAddressIndex = 2;
 * @return {number}
 */
proto.actions.RejectionAction.prototype.getRejectaddressindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.RejectionAction.prototype.setRejectaddressindex = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 RejectionCode = 3;
 * @return {number}
 */
proto.actions.RejectionAction.prototype.getRejectioncode = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.actions.RejectionAction.prototype.setRejectioncode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Message = 4;
 * @return {string}
 */
proto.actions.RejectionAction.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.actions.RejectionAction.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 Timestamp = 5;
 * @return {number}
 */
proto.actions.RejectionAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.actions.RejectionAction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AdministratorField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.AdministratorField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AdministratorField.displayName = 'proto.actions.AdministratorField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AdministratorField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AdministratorField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AdministratorField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AdministratorField.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: msg.getType(),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AdministratorField}
 */
proto.actions.AdministratorField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AdministratorField;
  return proto.actions.AdministratorField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AdministratorField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AdministratorField}
 */
proto.actions.AdministratorField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AdministratorField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AdministratorField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AdministratorField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AdministratorField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AdministratorField} The clone.
 */
proto.actions.AdministratorField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AdministratorField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Type = 1;
 * @return {number}
 */
proto.actions.AdministratorField.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.actions.AdministratorField.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.actions.AdministratorField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.AdministratorField.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AmendmentField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.AmendmentField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AmendmentField.displayName = 'proto.actions.AmendmentField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AmendmentField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AmendmentField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AmendmentField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AmendmentField.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldindex: msg.getFieldindex(),
    element: msg.getElement(),
    subfieldindex: msg.getSubfieldindex(),
    subfieldelement: msg.getSubfieldelement(),
    operation: msg.getOperation(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AmendmentField}
 */
proto.actions.AmendmentField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AmendmentField;
  return proto.actions.AmendmentField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AmendmentField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AmendmentField}
 */
proto.actions.AmendmentField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFieldindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setElement(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSubfieldindex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSubfieldelement(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOperation(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AmendmentField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AmendmentField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AmendmentField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AmendmentField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getElement();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getSubfieldindex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getSubfieldelement();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getOperation();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AmendmentField} The clone.
 */
proto.actions.AmendmentField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AmendmentField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 FieldIndex = 1;
 * @return {number}
 */
proto.actions.AmendmentField.prototype.getFieldindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.actions.AmendmentField.prototype.setFieldindex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 Element = 2;
 * @return {number}
 */
proto.actions.AmendmentField.prototype.getElement = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.AmendmentField.prototype.setElement = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 SubfieldIndex = 3;
 * @return {number}
 */
proto.actions.AmendmentField.prototype.getSubfieldindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.actions.AmendmentField.prototype.setSubfieldindex = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 SubfieldElement = 4;
 * @return {number}
 */
proto.actions.AmendmentField.prototype.getSubfieldelement = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.actions.AmendmentField.prototype.setSubfieldelement = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 Operation = 5;
 * @return {number}
 */
proto.actions.AmendmentField.prototype.getOperation = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.actions.AmendmentField.prototype.setOperation = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes Data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AmendmentField.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes Data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.actions.AmendmentField.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.actions.AmendmentField.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AmendmentField.prototype.setData = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetReceiverField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.AssetReceiverField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AssetReceiverField.displayName = 'proto.actions.AssetReceiverField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetReceiverField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetReceiverField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetReceiverField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AssetReceiverField.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    quantity: msg.getQuantity(),
    oraclesigalgorithm: msg.getOraclesigalgorithm(),
    oracleindex: msg.getOracleindex(),
    oracleconfirmationsig: msg.getOracleconfirmationsig_asB64(),
    oraclesigblockheight: msg.getOraclesigblockheight()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetReceiverField}
 */
proto.actions.AssetReceiverField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetReceiverField;
  return proto.actions.AssetReceiverField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetReceiverField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetReceiverField}
 */
proto.actions.AssetReceiverField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOraclesigalgorithm(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOracleindex(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOracleconfirmationsig(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOraclesigblockheight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetReceiverField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetReceiverField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetReceiverField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetReceiverField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getOraclesigalgorithm();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getOracleindex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getOracleconfirmationsig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getOraclesigblockheight();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AssetReceiverField} The clone.
 */
proto.actions.AssetReceiverField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AssetReceiverField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetReceiverField.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.actions.AssetReceiverField.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.actions.AssetReceiverField.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetReceiverField.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 Quantity = 2;
 * @return {number}
 */
proto.actions.AssetReceiverField.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.AssetReceiverField.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 OracleSigAlgorithm = 3;
 * @return {number}
 */
proto.actions.AssetReceiverField.prototype.getOraclesigalgorithm = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.actions.AssetReceiverField.prototype.setOraclesigalgorithm = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 OracleIndex = 4;
 * @return {number}
 */
proto.actions.AssetReceiverField.prototype.getOracleindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.actions.AssetReceiverField.prototype.setOracleindex = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes OracleConfirmationSig = 5;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetReceiverField.prototype.getOracleconfirmationsig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes OracleConfirmationSig = 5;
 * This is a type-conversion wrapper around `getOracleconfirmationsig()`
 * @return {string}
 */
proto.actions.AssetReceiverField.prototype.getOracleconfirmationsig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOracleconfirmationsig()));
};


/**
 * optional bytes OracleConfirmationSig = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOracleconfirmationsig()`
 * @return {!Uint8Array}
 */
proto.actions.AssetReceiverField.prototype.getOracleconfirmationsig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOracleconfirmationsig()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetReceiverField.prototype.setOracleconfirmationsig = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 OracleSigBlockHeight = 6;
 * @return {number}
 */
proto.actions.AssetReceiverField.prototype.getOraclesigblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.actions.AssetReceiverField.prototype.setOraclesigblockheight = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetSettlementField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetSettlementField.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetSettlementField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AssetSettlementField.displayName = 'proto.actions.AssetSettlementField';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetSettlementField.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetSettlementField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetSettlementField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetSettlementField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AssetSettlementField.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractindex: msg.getContractindex(),
    assettype: msg.getAssettype(),
    assetcode: msg.getAssetcode_asB64(),
    settlementsList: jspb.Message.toObjectList(msg.getSettlementsList(),
    proto.actions.QuantityIndexField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetSettlementField}
 */
proto.actions.AssetSettlementField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetSettlementField;
  return proto.actions.AssetSettlementField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetSettlementField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetSettlementField}
 */
proto.actions.AssetSettlementField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractindex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 4:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.getSettlementsList().push(value);
      msg.setSettlementsList(msg.getSettlementsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetSettlementField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetSettlementField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetSettlementField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetSettlementField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getSettlementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AssetSettlementField} The clone.
 */
proto.actions.AssetSettlementField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AssetSettlementField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 ContractIndex = 1;
 * @return {number}
 */
proto.actions.AssetSettlementField.prototype.getContractindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.actions.AssetSettlementField.prototype.setContractindex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string AssetType = 2;
 * @return {string}
 */
proto.actions.AssetSettlementField.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.AssetSettlementField.prototype.setAssettype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes AssetCode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetSettlementField.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes AssetCode = 3;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.AssetSettlementField.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.AssetSettlementField.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetSettlementField.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated QuantityIndexField Settlements = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.QuantityIndexField>}
 */
proto.actions.AssetSettlementField.prototype.getSettlementsList = function() {
  return /** @type{!Array.<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 4));
};


/** @param {Array.<!proto.actions.QuantityIndexField>} value  */
proto.actions.AssetSettlementField.prototype.setSettlementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.actions.AssetSettlementField.prototype.clearSettlementsList = function() {
  this.setSettlementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetTransferField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetTransferField.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetTransferField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.AssetTransferField.displayName = 'proto.actions.AssetTransferField';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetTransferField.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetTransferField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetTransferField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetTransferField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.AssetTransferField.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractindex: msg.getContractindex(),
    assettype: msg.getAssettype(),
    assetcode: msg.getAssetcode_asB64(),
    assetsendersList: jspb.Message.toObjectList(msg.getAssetsendersList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    assetreceiversList: jspb.Message.toObjectList(msg.getAssetreceiversList(),
    proto.actions.AssetReceiverField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetTransferField}
 */
proto.actions.AssetTransferField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetTransferField;
  return proto.actions.AssetTransferField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetTransferField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetTransferField}
 */
proto.actions.AssetTransferField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractindex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 4:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.getAssetsendersList().push(value);
      msg.setAssetsendersList(msg.getAssetsendersList());
      break;
    case 5:
      var value = new proto.actions.AssetReceiverField;
      reader.readMessage(value,proto.actions.AssetReceiverField.deserializeBinaryFromReader);
      msg.getAssetreceiversList().push(value);
      msg.setAssetreceiversList(msg.getAssetreceiversList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetTransferField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetTransferField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetTransferField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.AssetTransferField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getAssetsendersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = this.getAssetreceiversList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.actions.AssetReceiverField.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.AssetTransferField} The clone.
 */
proto.actions.AssetTransferField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.AssetTransferField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 ContractIndex = 1;
 * @return {number}
 */
proto.actions.AssetTransferField.prototype.getContractindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.actions.AssetTransferField.prototype.setContractindex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string AssetType = 2;
 * @return {string}
 */
proto.actions.AssetTransferField.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.AssetTransferField.prototype.setAssettype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes AssetCode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetTransferField.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes AssetCode = 3;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.AssetTransferField.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.AssetTransferField.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.AssetTransferField.prototype.setAssetcode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated QuantityIndexField AssetSenders = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.QuantityIndexField>}
 */
proto.actions.AssetTransferField.prototype.getAssetsendersList = function() {
  return /** @type{!Array.<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 4));
};


/** @param {Array.<!proto.actions.QuantityIndexField>} value  */
proto.actions.AssetTransferField.prototype.setAssetsendersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.actions.AssetTransferField.prototype.clearAssetsendersList = function() {
  this.setAssetsendersList([]);
};


/**
 * repeated AssetReceiverField AssetReceivers = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.AssetReceiverField>}
 */
proto.actions.AssetTransferField.prototype.getAssetreceiversList = function() {
  return /** @type{!Array.<!proto.actions.AssetReceiverField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AssetReceiverField, 5));
};


/** @param {Array.<!proto.actions.AssetReceiverField>} value  */
proto.actions.AssetTransferField.prototype.setAssetreceiversList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.actions.AssetTransferField.prototype.clearAssetreceiversList = function() {
  this.setAssetreceiversList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.DocumentField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.DocumentField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.DocumentField.displayName = 'proto.actions.DocumentField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.DocumentField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.DocumentField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.DocumentField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.DocumentField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    type: msg.getType(),
    contents: msg.getContents_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.DocumentField}
 */
proto.actions.DocumentField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.DocumentField;
  return proto.actions.DocumentField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.DocumentField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.DocumentField}
 */
proto.actions.DocumentField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.DocumentField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.DocumentField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.DocumentField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.DocumentField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.DocumentField} The clone.
 */
proto.actions.DocumentField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.DocumentField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.actions.DocumentField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.DocumentField.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.actions.DocumentField.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.DocumentField.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes Contents = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.DocumentField.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes Contents = 3;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.actions.DocumentField.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes Contents = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.actions.DocumentField.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.DocumentField.prototype.setContents = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.EntityField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.EntityField.repeatedFields_, null);
};
goog.inherits(proto.actions.EntityField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.EntityField.displayName = 'proto.actions.EntityField';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.EntityField.repeatedFields_ = [14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.EntityField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.EntityField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.EntityField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.EntityField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    type: msg.getType(),
    lei: msg.getLei(),
    addressincluded: msg.getAddressincluded(),
    unitnumber: msg.getUnitnumber(),
    buildingnumber: msg.getBuildingnumber(),
    street: msg.getStreet(),
    suburbcity: msg.getSuburbcity(),
    territorystateprovincecode: msg.getTerritorystateprovincecode(),
    countrycode: msg.getCountrycode(),
    postalzipcode: msg.getPostalzipcode(),
    emailaddress: msg.getEmailaddress(),
    phonenumber: msg.getPhonenumber(),
    administrationList: jspb.Message.toObjectList(msg.getAdministrationList(),
    proto.actions.AdministratorField.toObject, includeInstance),
    managementList: jspb.Message.toObjectList(msg.getManagementList(),
    proto.actions.ManagerField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.EntityField}
 */
proto.actions.EntityField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.EntityField;
  return proto.actions.EntityField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.EntityField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.EntityField}
 */
proto.actions.EntityField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLei(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAddressincluded(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitnumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildingnumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreet(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuburbcity(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerritorystateprovincecode(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostalzipcode(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmailaddress(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenumber(value);
      break;
    case 14:
      var value = new proto.actions.AdministratorField;
      reader.readMessage(value,proto.actions.AdministratorField.deserializeBinaryFromReader);
      msg.getAdministrationList().push(value);
      msg.setAdministrationList(msg.getAdministrationList());
      break;
    case 15:
      var value = new proto.actions.ManagerField;
      reader.readMessage(value,proto.actions.ManagerField.deserializeBinaryFromReader);
      msg.getManagementList().push(value);
      msg.setManagementList(msg.getManagementList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.EntityField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.EntityField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.EntityField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.EntityField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getLei();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAddressincluded();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getUnitnumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getBuildingnumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getStreet();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getSuburbcity();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getTerritorystateprovincecode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getPostalzipcode();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getEmailaddress();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getPhonenumber();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getAdministrationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.actions.AdministratorField.serializeBinaryToWriter
    );
  }
  f = this.getManagementList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.actions.ManagerField.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.EntityField} The clone.
 */
proto.actions.EntityField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.EntityField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.actions.EntityField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.actions.EntityField.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string LEI = 3;
 * @return {string}
 */
proto.actions.EntityField.prototype.getLei = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setLei = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool AddressIncluded = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.EntityField.prototype.getAddressincluded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.actions.EntityField.prototype.setAddressincluded = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string UnitNumber = 5;
 * @return {string}
 */
proto.actions.EntityField.prototype.getUnitnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setUnitnumber = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string BuildingNumber = 6;
 * @return {string}
 */
proto.actions.EntityField.prototype.getBuildingnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setBuildingnumber = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string Street = 7;
 * @return {string}
 */
proto.actions.EntityField.prototype.getStreet = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setStreet = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string SuburbCity = 8;
 * @return {string}
 */
proto.actions.EntityField.prototype.getSuburbcity = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setSuburbcity = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string TerritoryStateProvinceCode = 9;
 * @return {string}
 */
proto.actions.EntityField.prototype.getTerritorystateprovincecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setTerritorystateprovincecode = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string CountryCode = 10;
 * @return {string}
 */
proto.actions.EntityField.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setCountrycode = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string PostalZIPCode = 11;
 * @return {string}
 */
proto.actions.EntityField.prototype.getPostalzipcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setPostalzipcode = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string EmailAddress = 12;
 * @return {string}
 */
proto.actions.EntityField.prototype.getEmailaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setEmailaddress = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string PhoneNumber = 13;
 * @return {string}
 */
proto.actions.EntityField.prototype.getPhonenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.actions.EntityField.prototype.setPhonenumber = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * repeated AdministratorField Administration = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.AdministratorField>}
 */
proto.actions.EntityField.prototype.getAdministrationList = function() {
  return /** @type{!Array.<!proto.actions.AdministratorField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AdministratorField, 14));
};


/** @param {Array.<!proto.actions.AdministratorField>} value  */
proto.actions.EntityField.prototype.setAdministrationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


proto.actions.EntityField.prototype.clearAdministrationList = function() {
  this.setAdministrationList([]);
};


/**
 * repeated ManagerField Management = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.actions.ManagerField>}
 */
proto.actions.EntityField.prototype.getManagementList = function() {
  return /** @type{!Array.<!proto.actions.ManagerField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.ManagerField, 15));
};


/** @param {Array.<!proto.actions.ManagerField>} value  */
proto.actions.EntityField.prototype.setManagementList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


proto.actions.EntityField.prototype.clearManagementList = function() {
  this.setManagementList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ManagerField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.ManagerField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.ManagerField.displayName = 'proto.actions.ManagerField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ManagerField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ManagerField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ManagerField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.ManagerField.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: msg.getType(),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ManagerField}
 */
proto.actions.ManagerField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ManagerField;
  return proto.actions.ManagerField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ManagerField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ManagerField}
 */
proto.actions.ManagerField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.ManagerField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ManagerField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ManagerField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.ManagerField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.ManagerField} The clone.
 */
proto.actions.ManagerField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.ManagerField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Type = 1;
 * @return {number}
 */
proto.actions.ManagerField.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.actions.ManagerField.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.actions.ManagerField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.ManagerField.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.OracleField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.OracleField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.OracleField.displayName = 'proto.actions.OracleField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.OracleField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.OracleField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.OracleField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.OracleField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    url: msg.getUrl(),
    publickey: msg.getPublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.OracleField}
 */
proto.actions.OracleField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.OracleField;
  return proto.actions.OracleField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.OracleField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.OracleField}
 */
proto.actions.OracleField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.OracleField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.OracleField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.OracleField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.OracleField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.OracleField} The clone.
 */
proto.actions.OracleField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.OracleField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.actions.OracleField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.OracleField.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string URL = 2;
 * @return {string}
 */
proto.actions.OracleField.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.OracleField.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes PublicKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.OracleField.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes PublicKey = 3;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.actions.OracleField.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes PublicKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.actions.OracleField.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.OracleField.prototype.setPublickey = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.QuantityIndexField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.QuantityIndexField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.QuantityIndexField.displayName = 'proto.actions.QuantityIndexField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.QuantityIndexField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.QuantityIndexField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.QuantityIndexField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.QuantityIndexField.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: msg.getIndex(),
    quantity: msg.getQuantity()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.QuantityIndexField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.QuantityIndexField;
  return proto.actions.QuantityIndexField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.QuantityIndexField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.QuantityIndexField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.QuantityIndexField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.QuantityIndexField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.QuantityIndexField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.QuantityIndexField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.QuantityIndexField} The clone.
 */
proto.actions.QuantityIndexField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.QuantityIndexField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 Index = 1;
 * @return {number}
 */
proto.actions.QuantityIndexField.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.actions.QuantityIndexField.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 Quantity = 2;
 * @return {number}
 */
proto.actions.QuantityIndexField.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.QuantityIndexField.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.TargetAddressField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.TargetAddressField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.TargetAddressField.displayName = 'proto.actions.TargetAddressField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.TargetAddressField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.TargetAddressField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.TargetAddressField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.TargetAddressField.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    quantity: msg.getQuantity()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.TargetAddressField}
 */
proto.actions.TargetAddressField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.TargetAddressField;
  return proto.actions.TargetAddressField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.TargetAddressField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.TargetAddressField}
 */
proto.actions.TargetAddressField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.TargetAddressField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.TargetAddressField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.TargetAddressField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.TargetAddressField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.TargetAddressField} The clone.
 */
proto.actions.TargetAddressField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.TargetAddressField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.TargetAddressField.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.actions.TargetAddressField.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.actions.TargetAddressField.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value  */
proto.actions.TargetAddressField.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 Quantity = 2;
 * @return {number}
 */
proto.actions.TargetAddressField.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.actions.TargetAddressField.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.VotingSystemField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.VotingSystemField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.actions.VotingSystemField.displayName = 'proto.actions.VotingSystemField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.VotingSystemField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.VotingSystemField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.VotingSystemField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.actions.VotingSystemField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    votetype: msg.getVotetype(),
    tallylogic: msg.getTallylogic(),
    thresholdpercentage: msg.getThresholdpercentage(),
    votemultiplierpermitted: msg.getVotemultiplierpermitted(),
    holderproposalfee: msg.getHolderproposalfee()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.VotingSystemField}
 */
proto.actions.VotingSystemField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.VotingSystemField;
  return proto.actions.VotingSystemField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.VotingSystemField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.VotingSystemField}
 */
proto.actions.VotingSystemField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotetype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTallylogic(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThresholdpercentage(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVotemultiplierpermitted(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHolderproposalfee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.actions.VotingSystemField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.VotingSystemField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.VotingSystemField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.actions.VotingSystemField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getVotetype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTallylogic();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getThresholdpercentage();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getVotemultiplierpermitted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getHolderproposalfee();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.actions.VotingSystemField} The clone.
 */
proto.actions.VotingSystemField.prototype.cloneMessage = function() {
  return /** @type {!proto.actions.VotingSystemField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.actions.VotingSystemField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.actions.VotingSystemField.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string VoteType = 2;
 * @return {string}
 */
proto.actions.VotingSystemField.prototype.getVotetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.actions.VotingSystemField.prototype.setVotetype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string TallyLogic = 3;
 * @return {string}
 */
proto.actions.VotingSystemField.prototype.getTallylogic = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.actions.VotingSystemField.prototype.setTallylogic = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 ThresholdPercentage = 4;
 * @return {number}
 */
proto.actions.VotingSystemField.prototype.getThresholdpercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.actions.VotingSystemField.prototype.setThresholdpercentage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool VoteMultiplierPermitted = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.actions.VotingSystemField.prototype.getVotemultiplierpermitted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.actions.VotingSystemField.prototype.setVotemultiplierpermitted = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint64 HolderProposalFee = 6;
 * @return {number}
 */
proto.actions.VotingSystemField.prototype.getHolderproposalfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.actions.VotingSystemField.prototype.setHolderproposalfee = function(value) {
  jspb.Message.setField(this, 6, value);
};


