/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.messages.DocumentField');
goog.provide('proto.messages.Offer');
goog.provide('proto.messages.OutpointField');
goog.provide('proto.messages.OutputMetadata');
goog.provide('proto.messages.OutputTagField');
goog.provide('proto.messages.PrivateMessage');
goog.provide('proto.messages.PublicMessage');
goog.provide('proto.messages.RevertedTx');
goog.provide('proto.messages.SettlementRequest');
goog.provide('proto.messages.SignatureRequest');
goog.provide('proto.messages.TargetAddressField');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.PublicMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.messages.PublicMessage.repeatedFields_, null);
};
goog.inherits(proto.messages.PublicMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.PublicMessage.displayName = 'proto.messages.PublicMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.messages.PublicMessage.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.PublicMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.PublicMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.PublicMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.PublicMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp(),
    subject: msg.getSubject(),
    regarding: (f = msg.getRegarding()) && proto.messages.OutpointField.toObject(includeInstance, f),
    publicmessage: (f = msg.getPublicmessage()) && proto.messages.DocumentField.toObject(includeInstance, f),
    attachmentsList: jspb.Message.toObjectList(msg.getAttachmentsList(),
    proto.messages.DocumentField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.PublicMessage}
 */
proto.messages.PublicMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.PublicMessage;
  return proto.messages.PublicMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.PublicMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.PublicMessage}
 */
proto.messages.PublicMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 3:
      var value = new proto.messages.OutpointField;
      reader.readMessage(value,proto.messages.OutpointField.deserializeBinaryFromReader);
      msg.setRegarding(value);
      break;
    case 4:
      var value = new proto.messages.DocumentField;
      reader.readMessage(value,proto.messages.DocumentField.deserializeBinaryFromReader);
      msg.setPublicmessage(value);
      break;
    case 5:
      var value = new proto.messages.DocumentField;
      reader.readMessage(value,proto.messages.DocumentField.deserializeBinaryFromReader);
      msg.getAttachmentsList().push(value);
      msg.setAttachmentsList(msg.getAttachmentsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.PublicMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.PublicMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.PublicMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.PublicMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getSubject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRegarding();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.messages.OutpointField.serializeBinaryToWriter
    );
  }
  f = this.getPublicmessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.messages.DocumentField.serializeBinaryToWriter
    );
  }
  f = this.getAttachmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.messages.DocumentField.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.PublicMessage} The clone.
 */
proto.messages.PublicMessage.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.PublicMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.messages.PublicMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.messages.PublicMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Subject = 2;
 * @return {string}
 */
proto.messages.PublicMessage.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.messages.PublicMessage.prototype.setSubject = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional OutpointField Regarding = 3;
 * @return {proto.messages.OutpointField}
 */
proto.messages.PublicMessage.prototype.getRegarding = function() {
  return /** @type{proto.messages.OutpointField} */ (
    jspb.Message.getWrapperField(this, proto.messages.OutpointField, 3));
};


/** @param {proto.messages.OutpointField|undefined} value  */
proto.messages.PublicMessage.prototype.setRegarding = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.messages.PublicMessage.prototype.clearRegarding = function() {
  this.setRegarding(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.messages.PublicMessage.prototype.hasRegarding = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DocumentField PublicMessage = 4;
 * @return {proto.messages.DocumentField}
 */
proto.messages.PublicMessage.prototype.getPublicmessage = function() {
  return /** @type{proto.messages.DocumentField} */ (
    jspb.Message.getWrapperField(this, proto.messages.DocumentField, 4));
};


/** @param {proto.messages.DocumentField|undefined} value  */
proto.messages.PublicMessage.prototype.setPublicmessage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.messages.PublicMessage.prototype.clearPublicmessage = function() {
  this.setPublicmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.messages.PublicMessage.prototype.hasPublicmessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated DocumentField Attachments = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.messages.DocumentField>}
 */
proto.messages.PublicMessage.prototype.getAttachmentsList = function() {
  return /** @type{!Array.<!proto.messages.DocumentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.messages.DocumentField, 5));
};


/** @param {Array.<!proto.messages.DocumentField>} value  */
proto.messages.PublicMessage.prototype.setAttachmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.messages.PublicMessage.prototype.clearAttachmentsList = function() {
  this.setAttachmentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.PrivateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.messages.PrivateMessage.repeatedFields_, null);
};
goog.inherits(proto.messages.PrivateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.PrivateMessage.displayName = 'proto.messages.PrivateMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.messages.PrivateMessage.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.PrivateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.PrivateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.PrivateMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.PrivateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp(),
    subject: msg.getSubject(),
    regarding: (f = msg.getRegarding()) && proto.messages.OutpointField.toObject(includeInstance, f),
    privatemessage: (f = msg.getPrivatemessage()) && proto.messages.DocumentField.toObject(includeInstance, f),
    attachmentsList: jspb.Message.toObjectList(msg.getAttachmentsList(),
    proto.messages.DocumentField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.PrivateMessage}
 */
proto.messages.PrivateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.PrivateMessage;
  return proto.messages.PrivateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.PrivateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.PrivateMessage}
 */
proto.messages.PrivateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 3:
      var value = new proto.messages.OutpointField;
      reader.readMessage(value,proto.messages.OutpointField.deserializeBinaryFromReader);
      msg.setRegarding(value);
      break;
    case 4:
      var value = new proto.messages.DocumentField;
      reader.readMessage(value,proto.messages.DocumentField.deserializeBinaryFromReader);
      msg.setPrivatemessage(value);
      break;
    case 5:
      var value = new proto.messages.DocumentField;
      reader.readMessage(value,proto.messages.DocumentField.deserializeBinaryFromReader);
      msg.getAttachmentsList().push(value);
      msg.setAttachmentsList(msg.getAttachmentsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.PrivateMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.PrivateMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.PrivateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.PrivateMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getSubject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRegarding();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.messages.OutpointField.serializeBinaryToWriter
    );
  }
  f = this.getPrivatemessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.messages.DocumentField.serializeBinaryToWriter
    );
  }
  f = this.getAttachmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.messages.DocumentField.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.PrivateMessage} The clone.
 */
proto.messages.PrivateMessage.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.PrivateMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.messages.PrivateMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.messages.PrivateMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Subject = 2;
 * @return {string}
 */
proto.messages.PrivateMessage.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.messages.PrivateMessage.prototype.setSubject = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional OutpointField Regarding = 3;
 * @return {proto.messages.OutpointField}
 */
proto.messages.PrivateMessage.prototype.getRegarding = function() {
  return /** @type{proto.messages.OutpointField} */ (
    jspb.Message.getWrapperField(this, proto.messages.OutpointField, 3));
};


/** @param {proto.messages.OutpointField|undefined} value  */
proto.messages.PrivateMessage.prototype.setRegarding = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.messages.PrivateMessage.prototype.clearRegarding = function() {
  this.setRegarding(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.messages.PrivateMessage.prototype.hasRegarding = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DocumentField PrivateMessage = 4;
 * @return {proto.messages.DocumentField}
 */
proto.messages.PrivateMessage.prototype.getPrivatemessage = function() {
  return /** @type{proto.messages.DocumentField} */ (
    jspb.Message.getWrapperField(this, proto.messages.DocumentField, 4));
};


/** @param {proto.messages.DocumentField|undefined} value  */
proto.messages.PrivateMessage.prototype.setPrivatemessage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.messages.PrivateMessage.prototype.clearPrivatemessage = function() {
  this.setPrivatemessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.messages.PrivateMessage.prototype.hasPrivatemessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated DocumentField Attachments = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.messages.DocumentField>}
 */
proto.messages.PrivateMessage.prototype.getAttachmentsList = function() {
  return /** @type{!Array.<!proto.messages.DocumentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.messages.DocumentField, 5));
};


/** @param {Array.<!proto.messages.DocumentField>} value  */
proto.messages.PrivateMessage.prototype.setAttachmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.messages.PrivateMessage.prototype.clearAttachmentsList = function() {
  this.setAttachmentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.RevertedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.RevertedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.RevertedTx.displayName = 'proto.messages.RevertedTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.RevertedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.RevertedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.RevertedTx} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.RevertedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp(),
    transaction: msg.getTransaction_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.RevertedTx}
 */
proto.messages.RevertedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.RevertedTx;
  return proto.messages.RevertedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.RevertedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.RevertedTx}
 */
proto.messages.RevertedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.RevertedTx} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.RevertedTx.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.RevertedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.RevertedTx.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.RevertedTx} The clone.
 */
proto.messages.RevertedTx.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.RevertedTx} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.messages.RevertedTx.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.messages.RevertedTx.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes Transaction = 2;
 * @return {!(string|Uint8Array)}
 */
proto.messages.RevertedTx.prototype.getTransaction = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes Transaction = 2;
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {string}
 */
proto.messages.RevertedTx.prototype.getTransaction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransaction()));
};


/**
 * optional bytes Transaction = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {!Uint8Array}
 */
proto.messages.RevertedTx.prototype.getTransaction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransaction()));
};


/** @param {!(string|Uint8Array)} value  */
proto.messages.RevertedTx.prototype.setTransaction = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.Offer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.Offer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.Offer.displayName = 'proto.messages.Offer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.Offer.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.Offer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.Offer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.Offer.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.Offer}
 */
proto.messages.Offer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.Offer;
  return proto.messages.Offer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.Offer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.Offer}
 */
proto.messages.Offer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.Offer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.Offer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.Offer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.Offer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.Offer} The clone.
 */
proto.messages.Offer.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.Offer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.messages.Offer.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.messages.Offer.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes Payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.messages.Offer.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes Payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.messages.Offer.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes Payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.messages.Offer.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value  */
proto.messages.Offer.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.SignatureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.SignatureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.SignatureRequest.displayName = 'proto.messages.SignatureRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.SignatureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.SignatureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.SignatureRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.SignatureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.SignatureRequest}
 */
proto.messages.SignatureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.SignatureRequest;
  return proto.messages.SignatureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.SignatureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.SignatureRequest}
 */
proto.messages.SignatureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.SignatureRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.SignatureRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.SignatureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.SignatureRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.SignatureRequest} The clone.
 */
proto.messages.SignatureRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.SignatureRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.messages.SignatureRequest.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.messages.SignatureRequest.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes Payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.messages.SignatureRequest.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes Payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.messages.SignatureRequest.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes Payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.messages.SignatureRequest.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value  */
proto.messages.SignatureRequest.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.SettlementRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.messages.SettlementRequest.repeatedFields_, null);
};
goog.inherits(proto.messages.SettlementRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.SettlementRequest.displayName = 'proto.messages.SettlementRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.messages.SettlementRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.SettlementRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.SettlementRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.SettlementRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.SettlementRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp(),
    transfertxid: msg.getTransfertxid_asB64(),
    contractfeesList: jspb.Message.toObjectList(msg.getContractfeesList(),
    proto.messages.TargetAddressField.toObject, includeInstance),
    settlement: msg.getSettlement_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.SettlementRequest}
 */
proto.messages.SettlementRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.SettlementRequest;
  return proto.messages.SettlementRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.SettlementRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.SettlementRequest}
 */
proto.messages.SettlementRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransfertxid(value);
      break;
    case 3:
      var value = new proto.messages.TargetAddressField;
      reader.readMessage(value,proto.messages.TargetAddressField.deserializeBinaryFromReader);
      msg.getContractfeesList().push(value);
      msg.setContractfeesList(msg.getContractfeesList());
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSettlement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.SettlementRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.SettlementRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.SettlementRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.SettlementRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getTransfertxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getContractfeesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.messages.TargetAddressField.serializeBinaryToWriter
    );
  }
  f = this.getSettlement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.SettlementRequest} The clone.
 */
proto.messages.SettlementRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.SettlementRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.messages.SettlementRequest.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.messages.SettlementRequest.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes TransferTxId = 2;
 * @return {!(string|Uint8Array)}
 */
proto.messages.SettlementRequest.prototype.getTransfertxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes TransferTxId = 2;
 * This is a type-conversion wrapper around `getTransfertxid()`
 * @return {string}
 */
proto.messages.SettlementRequest.prototype.getTransfertxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransfertxid()));
};


/**
 * optional bytes TransferTxId = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransfertxid()`
 * @return {!Uint8Array}
 */
proto.messages.SettlementRequest.prototype.getTransfertxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransfertxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.messages.SettlementRequest.prototype.setTransfertxid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated TargetAddressField ContractFees = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.messages.TargetAddressField>}
 */
proto.messages.SettlementRequest.prototype.getContractfeesList = function() {
  return /** @type{!Array.<!proto.messages.TargetAddressField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.messages.TargetAddressField, 3));
};


/** @param {Array.<!proto.messages.TargetAddressField>} value  */
proto.messages.SettlementRequest.prototype.setContractfeesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.messages.SettlementRequest.prototype.clearContractfeesList = function() {
  this.setContractfeesList([]);
};


/**
 * optional bytes Settlement = 4;
 * @return {!(string|Uint8Array)}
 */
proto.messages.SettlementRequest.prototype.getSettlement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes Settlement = 4;
 * This is a type-conversion wrapper around `getSettlement()`
 * @return {string}
 */
proto.messages.SettlementRequest.prototype.getSettlement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSettlement()));
};


/**
 * optional bytes Settlement = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSettlement()`
 * @return {!Uint8Array}
 */
proto.messages.SettlementRequest.prototype.getSettlement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSettlement()));
};


/** @param {!(string|Uint8Array)} value  */
proto.messages.SettlementRequest.prototype.setSettlement = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.OutputMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.messages.OutputMetadata.repeatedFields_, null);
};
goog.inherits(proto.messages.OutputMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.OutputMetadata.displayName = 'proto.messages.OutputMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.messages.OutputMetadata.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.OutputMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.OutputMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.OutputMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.OutputMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputdescription: msg.getOutputdescription(),
    tagsList: jspb.Message.getField(msg, 2),
    customtagsList: jspb.Message.toObjectList(msg.getCustomtagsList(),
    proto.messages.OutputTagField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.OutputMetadata}
 */
proto.messages.OutputMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.OutputMetadata;
  return proto.messages.OutputMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.OutputMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.OutputMetadata}
 */
proto.messages.OutputMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputdescription(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setTagsList(value);
      break;
    case 3:
      var value = new proto.messages.OutputTagField;
      reader.readMessage(value,proto.messages.OutputTagField.deserializeBinaryFromReader);
      msg.getCustomtagsList().push(value);
      msg.setCustomtagsList(msg.getCustomtagsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.OutputMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.OutputMetadata.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.OutputMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.OutputMetadata.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOutputdescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTagsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      2,
      f
    );
  }
  f = this.getCustomtagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.messages.OutputTagField.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.OutputMetadata} The clone.
 */
proto.messages.OutputMetadata.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.OutputMetadata} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string OutputDescription = 1;
 * @return {string}
 */
proto.messages.OutputMetadata.prototype.getOutputdescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.messages.OutputMetadata.prototype.setOutputdescription = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated uint64 Tags = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.messages.OutputMetadata.prototype.getTagsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<number>} value  */
proto.messages.OutputMetadata.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.messages.OutputMetadata.prototype.clearTagsList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * repeated OutputTagField CustomTags = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.messages.OutputTagField>}
 */
proto.messages.OutputMetadata.prototype.getCustomtagsList = function() {
  return /** @type{!Array.<!proto.messages.OutputTagField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.messages.OutputTagField, 3));
};


/** @param {Array.<!proto.messages.OutputTagField>} value  */
proto.messages.OutputMetadata.prototype.setCustomtagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.messages.OutputMetadata.prototype.clearCustomtagsList = function() {
  this.setCustomtagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.OutpointField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.OutpointField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.OutpointField.displayName = 'proto.messages.OutpointField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.OutpointField.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.OutpointField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.OutpointField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.OutpointField.toObject = function(includeInstance, msg) {
  var f, obj = {
    txid: msg.getTxid_asB64(),
    outputindex: msg.getOutputindex()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.OutpointField}
 */
proto.messages.OutpointField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.OutpointField;
  return proto.messages.OutpointField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.OutpointField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.OutpointField}
 */
proto.messages.OutpointField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutputindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.OutpointField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.OutpointField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.OutpointField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.OutpointField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getOutputindex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.OutpointField} The clone.
 */
proto.messages.OutpointField.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.OutpointField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes TxId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.messages.OutpointField.prototype.getTxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes TxId = 1;
 * This is a type-conversion wrapper around `getTxid()`
 * @return {string}
 */
proto.messages.OutpointField.prototype.getTxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxid()));
};


/**
 * optional bytes TxId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxid()`
 * @return {!Uint8Array}
 */
proto.messages.OutpointField.prototype.getTxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.messages.OutpointField.prototype.setTxid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 OutputIndex = 2;
 * @return {number}
 */
proto.messages.OutpointField.prototype.getOutputindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.messages.OutpointField.prototype.setOutputindex = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.OutputTagField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.OutputTagField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.OutputTagField.displayName = 'proto.messages.OutputTagField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.OutputTagField.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.OutputTagField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.OutputTagField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.OutputTagField.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: msg.getTag()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.OutputTagField}
 */
proto.messages.OutputTagField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.OutputTagField;
  return proto.messages.OutputTagField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.OutputTagField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.OutputTagField}
 */
proto.messages.OutputTagField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.OutputTagField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.OutputTagField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.OutputTagField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.OutputTagField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.OutputTagField} The clone.
 */
proto.messages.OutputTagField.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.OutputTagField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Tag = 1;
 * @return {string}
 */
proto.messages.OutputTagField.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.messages.OutputTagField.prototype.setTag = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.DocumentField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.DocumentField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.DocumentField.displayName = 'proto.messages.DocumentField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.DocumentField.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.DocumentField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.DocumentField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.DocumentField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    type: msg.getType(),
    contents: msg.getContents_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.DocumentField}
 */
proto.messages.DocumentField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.DocumentField;
  return proto.messages.DocumentField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.DocumentField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.DocumentField}
 */
proto.messages.DocumentField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.DocumentField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.DocumentField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.DocumentField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.DocumentField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.DocumentField} The clone.
 */
proto.messages.DocumentField.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.DocumentField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.messages.DocumentField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.messages.DocumentField.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.messages.DocumentField.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.messages.DocumentField.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes Contents = 3;
 * @return {!(string|Uint8Array)}
 */
proto.messages.DocumentField.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes Contents = 3;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.messages.DocumentField.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes Contents = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.messages.DocumentField.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/** @param {!(string|Uint8Array)} value  */
proto.messages.DocumentField.prototype.setContents = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.TargetAddressField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.TargetAddressField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.TargetAddressField.displayName = 'proto.messages.TargetAddressField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.TargetAddressField.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.TargetAddressField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.TargetAddressField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.messages.TargetAddressField.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    quantity: msg.getQuantity()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.TargetAddressField}
 */
proto.messages.TargetAddressField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.TargetAddressField;
  return proto.messages.TargetAddressField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.TargetAddressField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.TargetAddressField}
 */
proto.messages.TargetAddressField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.messages.TargetAddressField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.TargetAddressField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.TargetAddressField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.messages.TargetAddressField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.messages.TargetAddressField} The clone.
 */
proto.messages.TargetAddressField.prototype.cloneMessage = function() {
  return /** @type {!proto.messages.TargetAddressField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.messages.TargetAddressField.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.messages.TargetAddressField.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.messages.TargetAddressField.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value  */
proto.messages.TargetAddressField.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 Quantity = 2;
 * @return {number}
 */
proto.messages.TargetAddressField.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.messages.TargetAddressField.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 2, value);
};


