
description: Static Contract Formation Action
type: object
properties:
  ContractName:
    description:  >
      Can be any unique identifying string, including human readable names for branding/vanity
      purposes. Contract identifier (instance) is the bitcoin public address. If the public address
      is lost, then the administration will have to reissue the entire contract, Asset Definition and
      tokens with the new public address. Smart contracts can be branded and specialized to suit any
      terms and conditions.
    type: string
    example: Tesla - Shareholder Agreement
  ContractCode:
    description:  >
      32 randomly generated bytes. Each Contract Code should be unique. The Contract ID will be human
      facing and will be the Contract Code, with a checksum, encoded in base58 and prefixed by 'CON'.
      Contract ID = CON + base58(ContractCode + checksum).  Eg. Contract ID =
      'CON18RDoKK7Ed5zid2FkKVy7q3rULr4tgfjr4'
    type: string
  BodyOfAgreementType:
    description: 1 - SHA-256 Hash, 2 - Tokenized Body of Agreement Format
    type: number
    example: 1
  BodyOfAgreement:
    description:  >
      SHA-256 hash of the body of the agreement (full contract in pdf format or the like) or the full
      terms and conditions of an agreement in the Tokenized Body of Agreement format.  This is
      specific to the smart contract and relevant Assets.  Legal and technical information.
    type: string
  ContractType:
    description: Describes the purpose of the contract.
    type: string
    example: Non-Disclosure Agreement
  SupportingDocs:
    description: Supporting documents that are important to the contract.
    type: array
    items:
      type: object
      $ref: "#/components/schemas/DocumentField"
  ContractRevision:
    description: Counter 0 to (2^32)-1
    type: number
    example: 0
  GoverningLaw:
    description:  >
      5 Letter Code to identify which governing law the contract will adhere to.  Disputes are to be
      settled by this law in the jurisdiction specified below. Private dispute resolution
      organizations can be used as well.  A custom code just needs to be defined.
    type: string
    example: USA
  Jurisdiction:
    description:  >
      Legal proceedings/arbitration will take place using the specified Governing Law in this
      location.
    type: string
    example: US-CA
  EffectiveDate:
    description: Start date of the contract.
    type: number
  ContractExpiration:
    description:  >
      All actions related to the contract will cease to work after this timestamp. The smart contract
      will stop running.  This will allow many token use cases to be able to calculate smart contract
      running costs. Eg. an issuer is creating tickets for an event on the 5th of June 2018.  The
      smart contract will facilitate exchange and send transactions up until the 6th of June. 
      Wallets can use this to forget tokens that are no longer valid - or at least store them in an
      'Expired' folder.
    type: number
  ContractURI:
    description:  >
      Length 0-255 bytes. Points to an information page that also has a copy of the Contract.  Anyone
      can go to the website to have a look at the price/token, information about the issuer
      (company), information about the Asset, legal information, etc.  There will also be a way for
      token owners to vote on this page and contact details with the issuer/tokenized companies.
      Could be a IPv6/IPv4, or txn-id for on chain information or even a public address (DNS).
    type: string
    example: https://tokenized.com/Contract/3qeoSCg7JmfSnJesJFojj
  PrevRevTxID:
    description: The Tx-ID of the previous contract revision.
    type: string
  Entities:
    description: A list of legal entities associated with this contract.
    type: array
    items:
      type: object
      $ref: "#/components/schemas/EntityField"
  EntityOracle:
    description: The oracle that provided the signature used to verify the entity's identity.
    type: object
    $ref: "#/components/schemas/OracleField"
  EntityOracleSignature:
    description:  >
      The ECDSA signature provided by the oracle specified. For N entities, the first N inputs must
      correspond with those entities.
    type: string
  EntityOracleSigBlockHeight:
    description: The block height of the block hash used in the oracle signature.
    type: number

